<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="repository-manager">
  <title>仓库管理器</title>

  <section>
    <title>简介</title>

    <para>仓库管理器有两个服务目的：首先它的角色是一个高度可配置的介于你的组织与公开Maven仓库之间的代理，其次它为你的组织提供了一个部署你组织内部生成的构件的地方。</para>

    <para>代理Maven仓库有很多好处。对于一开始使用Maven的情况来说，通过为所有的来自中央Maven仓库的构件安装一个本地的缓存，你将加速组织内部的所有构建。如果有开发人员想要下载
    Spring Framework 的2.5版本，并且你在使用Nexus，那些依赖（以及依赖的依赖）至需要从远程仓库下载一次。如果有一个高速的
    Internet
    网络连接，这看起来没什么大不了的，但是如果你一直要求你的开发人员去下载几百兆的第三方依赖，那么真正节省的时间将会是Maven检查依赖新版本以及下载依赖的时间。通过本地仓库提供Maven依赖服务可以节省数百的HTTP请求，在大型的多项目构建中，这样为一次构件节省几分钟的时间。</para>

    <para>除了简单的节省时间和贷款，仓库管理器为组织提供了一种控制Maven下载的机制。你可以详细的设置从公开仓库包含或排除特定的构件。能够控制从核心Maven仓库的下载对于很多组织来说是经常是一个必要前提，它们需要维护一个组织中使用依赖的严格控制。一个想要标准化某个如Hibernate或者Spring依赖版本的组织可以通过在仓库管理器中仅仅提供一个特殊版本的构件来加强这种标准。还有一些组织可能关心确保所有外部的依赖拥有和组织的法律规范相容的许可证。如果一个企业生产了一个分发应用程序，它们可能想要确定没有人不小心添加了一个涉及GPL许可证的依赖。仓库管理器为那些需要确信总体架构和政策实施的组织提供了这一层次的控制。</para>

    <para>除了控制对远程仓库的访问以外，仓库管理器也为完全采用Maven提供了一些很至关重要的东西。除非你希望你组织的每一个成员下载并构建一个单独的内部项目，否则你会希望为开发人员和部门之间提供一种共享内部项目构件的快照版本和发布版本的机制。Nexus为你的组织提供了这样的部署目标。在你安装了Nexus之后，你可以开始使用Maven让它部署快照版和发布版至一个有Nexus管理的定制仓库。</para>

    <section>
      <title>Nexus历史</title>

      <para>Tamas Cservenak 在2005年12月开始为Proximity工作，当时他正想办法将它自己的系统和由Hungarian
      <acronym>ISP</acronym>提供的慢得难以置信的<acronym>ADSL</acronym>连接隔离开。Proximity以一个简单web应用的形式启动，用来为有网络连接问题的小型组织代理构件。为Maven构件创建一个对于中央核心仓库的本地的命令驱动的缓存，能让组织访问来自中央核心仓库的构件，而且它同时也能确保这些构件不会通过很慢的<acronym>ADSL</acronym>连接来下载，要知道很多开发人员在使用这个连接。在2007年，Sonatype请求Tamas帮助创建一个类似的名为Nexus的产品。Nexus目前可以被认为是Proximity逻辑上的下一个步伐。</para>

      <para>Nexus目前有一个活动的开发团队包括Tamas Cservenak，Max Powers，Dmitry Platonoff
      和Brian Fox。Nexus的关于索引的部分代码也同时在m2eclipse中被使用，这些代码目前由Eugene
      Kuleshov开发。</para>
    </section>
  </section>

  <section>
    <title>安装Nexus</title>

    <section>
      <title>从Sonatype下载Nexus</title>

      <para>你可以从<ulink
      url="http://nexus.sonatype.org">http://nexus.sonatype.org</ulink>找到关于Nexus的信息。要下载Nexus，访问<ulink
      url="http://nexus.sonatype.org/downloads/">http://nexus.sonatype.org/downloads/</ulink>。点击下载链接，下载适用于你平台的存档文件。Nexus目前有<acronym>ZIP</acronym>和Gzip归档的<acronym>TAR</acronym>两种可用形式。</para>
    </section>

    <section>
      <title>安装Nexus</title>

      <para>安装Nexus很简单，打开Nexus归档文件至一个目录。如果你正在本地工作站上安装Nexus，以测试它的运行，你可以将其安装至你的用户目录，或者随便什么你喜欢的地方；Nexus没有任何硬编码的目录，它能在任意目录运行。如果你下载了一个<acronym>ZIP</acronym>归档文件，运行：</para>

      <screen>$ <command>unzip nexus-1.0.0-beta-3-bundle.zip</command></screen>

      <para>如果你下载了GZip归档的<acronym>TAR</acronym>文件，运行：</para>

      <screen>$ <command>tar xvzf nexus-1.0.0-beta-3-bundle.tgz</command></screen>

      <para>如果你正在一个服务器上安装Nexus，你可能想要使用的目录不是你的用户目录。在Unix机器上，这可能是<filename>/usr/local/nexus-1.0.0-beta-3</filename>和一个指向Nexus目录的符号链接<filename>/usr/local/nexus</filename>。使用一个通用的符号链接来指向Nexus的某个特定版本是一个普遍的实践，它能让你更容易的将Nexus更新至更新的版本。</para>

      <screen>$ <command>sudo cp nexus-1.0.0-beta-3-bundle.tgz /usr/local</command>
$ <command>cd /usr/local</command>
$ <command>sudo tar xvzf nexus-1.0.0-beta-3-bundle.tgz</command>
$ <command>ln -s nexus-1.0.0-beta-3 nexus</command></screen>

      <para>虽然对于Nexus的运行来说这不是必要的，你可能想要设置一个环境变量<varname>NEXUS_HOME</varname>，指向Nexus的安装目录。本章通过<varname>${NEXUS_HOME}</varname>的形式来引用这个位置。</para>
    </section>

    <section>
      <title>运行Nexus</title>

      <para>当你启动Nexus，启动过了一个web服务器，它的默认地址是<varname>localhost:8081</varname>。Nexus在一个名为Jetty的servlet容器中运行，它使用一个名为<ulink
      url="http://wrapper.tanukisoftware.org/doc/english/introduction.html">Tanuki
      Java Service
      Wrapper</ulink>的本地服务包裹器启动。这个服务包裹器可以被配置成以Windows服务或Unix守护线程的形式运行Nexus。要启动Nexus，你需要为你的平台找到合适的启动脚本。要查看可用平台的列表，查看<filename>${NEXUS_HOME}/bin/jsw</filename>目录的内容。</para>

      <para>下面的例子展示了使用Mac
      OSX的脚本启动Nexus。首先我们列出<filename>${NEXUS_HOME}/bin/jsw</filename>的内容以查看可用的平台，然后我们用<command>chmod</command>命令使这个bin目录的内容可执行。Mac
      OSX包裹器通过调用<command>app
      start</command>启动，然后我们tail在<filename>${NEXUS_HOME}/container/logs</filename>中的<filename>wrapper.log</filename>。Nexus会初始化自己然后打印出一条信息说明它正在监听<varname>localhost:8081</varname>。</para>

      <screen>$ <command>cd Nexus</command>
$ <command>ls ./bin/jsw/</command>
aix-ppc-32/          linux-ppc-64/        solaris-sparc-32/
aix-ppc-64/          linux-x86-32/        solaris-sparc-64/
hpux-parisc-32/      linux-x86-64/        solaris-x86-32/
hpux-parisc-64/      macosx-universal-32/ windows-x86-32/
$ <command>chmod -R a+x bin</command>
$ <command>./container/bin/jsw/macosx-universal-32/app start</command>
Nexus Repository Manager...
$ <command>tail -f container/logs/wrapper.log</command> 
INFO  ... [ServletContainer:default] - Started SelectChannelConnector@0.0.0.0:8081
</screen>

      <para>到目前为止，Nexus已经开始运行并监听端口8081。要使用Nexus，启动一个web浏览器然后舒服URL：<ulink
      url="http://localhost:8081/nexus">http://localhost:8081/nexus</ulink>。点击web页面右上角的“Log
      In”链接，你应该看到如下的登陆对话框。</para>

      <para><emphasis>默认的NEXUS用户名和密码是"admin" 和 "admin123"。</emphasis></para>

      <figure>
        <title>Nexus登陆窗口(默认 用户名/密码 是 admin/admin123)</title>

        <screenshot>
          <screeninfo>这是Nexus的初始屏幕。默认的管理员登陆用户名是“admin”，默认的密码是“admin123”</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_nexus-login.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>
    </section>

    <section id="sect-repoman-post-install">
      <title>安装后检查单</title>

      <para>Nexus带有默认的密码和仓库索引设置，它们都需要更改以满足你的安装需要（以及安全）。安装完并运行了Nexus后，你需要确认你完成了下列任务：</para>

      <variablelist>
        <varlistentry>
          <term>更改管理员密码和Email地址</term>

          <listitem>
            <para>默认的管理密码是<varname>admin123</varname>。对一个全新的Nexus安装，你首先要做的是更改这个密码。要更改默认的管理员登陆名"admin"及密码"admin123"，在浏览窗口的左边安全菜单中点击更改密码。</para>

            <!--Put in instructions for email address-->
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>配置SMTP设置</term>

          <listitem>
            <para>Nexus可以发送用户名和密码获取email，要开启这个特性，你需要用SMTP主机和端口配置Nexus，以及相关的Nexus用来连接邮件服务器的认证参数。为此，载入如<xref
            linkend="sect-repoman-server-conf" />中的服务器配置对话框。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>开启远程索引下载</term>

          <listitem>
            <para>Nexus带有三个重要的代理仓库，有中央Maven仓库，Apache快照仓库，和Codehaus快照仓库。它们中的每一个仓库都包含了数千（或数万）的构件，下载每个仓库的所有内容是不切实际的。处于这个原因，大部分仓库维护了一个编录了整个内容的Lucene索引，以提供快速和有效的搜索。Nexus使用这些远程索引搜索构件，但是默认设置我们关闭了索引下载。要下载远程索引，</para>

            <orderedlist>
              <listitem>
                <para>点击管理菜单下面的Repositories，更改三个代理仓库的Download Remote
                Indexes为ture。你需要为此载入如<xref lang=""
                linkend="sect-manage-repo" />中的对话框。</para>
              </listitem>

              <listitem>
                <para>在每个代理仓库上右击然后选择Re-index。这会触发Nexus下咋远程的索引文件。</para>
              </listitem>
            </orderedlist>

            <para>Nexus下载整个索引可能需要好几分钟，但是一旦你下载好之后，你就能够搜索Maven仓库的所有内容了。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>Sonatype想要确信没有创建一个会在默认情况下对中央仓库造成大量拥挤的产品。虽然大部分用户会想要开启远程索引下载，我们还是不想使之成为默认设置，当数百万用户下载一个新版本的Nexus继而不断的下载这个21MB的中央索引的时候，会制造对我们自己的拒绝服务攻击。如果你想要Nexus返回全部的搜索结果，你就必须显式的开启远程索引下载。</para>
      </note>
    </section>

    <section>
      <title>为Redhat/Fedora/CentOS设置启动脚本</title>

      <para>你可以将Nexus配置成自动启动，通过将<filename>app</filename>脚本拷贝到<filename>/etc/init.d</filename>目录。在一个Redhat变种的Linux系统上（Redhat,
      Fedora, or CentOS），以root用户执行下列操作：</para>

      <orderedlist>
        <listitem>
          <para>复制<filename>${NEXUS_HOME}/bin/jsw/linux-ppc-64/app</filename>，或<filename>${NEXUS_HOME}/bin/jsw/linux-x86-32/app</filename>，或<filename>${NEXUS_HOME}/bin/jsw/linux-x86-64/app</filename>至<filename>/etc/init.d/nexus</filename>。</para>
        </listitem>

        <listitem>
          <para>使<filename>/etc/init.d/nexus</filename>脚本可运行 —— <command>chmod
          755 /etc/init.d/nexus</command>。</para>

          <para>Make the <filename>/etc/init.d/nexus</filename> script
          卡executable - <command>chmod 755 /etc/init.d/nexus</command></para>
        </listitem>

        <listitem>
          <para>编辑该脚本，更改下列变量。</para>

          <itemizedlist>
            <listitem>
              <para>更改 <varname>APP_NAME</varname> 为 "nexus"</para>
            </listitem>

            <listitem>
              <para>更改 <varname>APP_LONG_NAME</varname> 为 "Sonatype
              Nexus"</para>
            </listitem>

            <listitem>
              <para>添加一个变量 <varname>NEXUS_HOME</varname> 指向你的 Nexus
              安装目录</para>
            </listitem>

            <listitem>
              <para>添加一个变量 <varname>PLATFORM</varname> 内容包含
              <varname>linux-x86-32</varname>，
              <varname>linux-x86-64</varname>， 或
              <varname>linux-ppc-64</varname></para>
            </listitem>

            <listitem>
              <para>更改 <varname>WRAPPER_CMD</varname> 为
              <filename>${NEXUS_HOME}/bin/jsw/${PLATFORM}/wrapper</filename></para>
            </listitem>

            <listitem>
              <para>更改 <varname>WRAPPER_CONF</varname> 为
              <filename>${NEXUS_HOME}/conf/wrapper.conf</filename></para>
            </listitem>

            <listitem>
              <para>更改 <varname>PIDDIR</varname> 为
              <filename>/var/run</filename>.</para>
            </listitem>

            <listitem>
              <para>添加一个 <varname>JAVA_HOME</varname> 变量指向你的本地 Java 安装</para>
            </listitem>

            <listitem>
              <para>添加 <filename>${JAVA_HOME}/bin</filename> 至
              <varname>PATH</varname></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>(可选) 设置 RUN_AS_USER 为 "nexus". 如果你这么做，你需要：</para>

          <itemizedlist>
            <listitem>
              <para>创建一个 nexus 用户</para>
            </listitem>

            <listitem>
              <para>更改你的 nexus 安装目录的 Owner 和 Group 为 nexus</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </orderedlist>

      <para>最后你应该有一个文件<filename>/etc/init.d/nexus</filename>，它拥有如下的一些列配置属性（假设你在<filename>/usr/local/nexus</filename>安装Nexus，你在<filename>/usr/java/latest</filename>安装了Java）：</para>

      <programlisting>JAVA_HOME=/usr/java/latest
PATH=${PATH}:${JAVA_HOME}/bin
APP_NAME="nexus"
APP_LONG_NAME="Sonatype Nexus"
NEXUS_HOME=/usr/local/nexus
PLATFORM=linux-x86-64
WRAPPER_CMD="${NEXUS_HOME}/bin/jsw/${PLATFORM}/wrapper"
WRAPPER_CONF="${NEXUS_HOME}/conf/wrapper.conf"
PRIORITY=
PIDDIR="/var/run"
#RUN_AS_USER=nexus
</programlisting>

      <para>这个脚本有一个适当的<command>chkconfig</command>指令，因此要添加Nexus为一个服务，你要做的是运行如下的命令：</para>

      <screen>$ <command>cd /etc/init.d</command>
$ <command>chkconfig --add nexus</command>
$ <command>chkconfig --levels 345 nexus on</command>
$ <command>service nexus start</command>
Starting Sonatype Nexus...
$ <command>tail -f /usr/local/nexus/logs/wrapper.log</command></screen>

      <para>第二个命令添加nexus为一个服务，可以由<command>service</command>命令启动和停止，可以有<command>chkconfig</command>命令管理。<command>chkconfig</command>管理<filename>/etc/rc[0-6].d</filename>中的符号链接，当操作系统重启或者在运行级别中转换时，它们控制服务的启动和停止。第三个命令添加nexus至运行级别3，4，和5
      。service命令启动Nexus，最后的命令追踪<filename>wrapper.log</filename>以验证Nexus成功启动。如果Nexus成功启动了你应该看到一个信息告诉你Nexus正在端口8001监听<acronym>HTTP</acronym>连接。</para>
    </section>

    <section>
      <title>升级Nexus版本</title>

      <para>升级一个已安装的Nexus版本十分容易。每个Nexus版本有两个可用的归档文件可下载。完整的归档文件包含Nexus应用程序，Nexus启动脚本，以及用来保存仓库索引和远程仓库本地缓存的工作目录。如果你用Nexus用得很厉害，这个工作目录会包含数G的构件，你不会希望在每次升级Nexus的时候必须重新创建这个仓库。升级下载文件被创建成给用户提供一个方便的形式升级Nexus，它会保存Nexus数据；升级下载文件只包含Nexus应用程序代码。第一次你安装Nexus的时候，你下载完全的Nexus分发包，当你想要安装你的Nexus安装，同时保留你的仓库数据的时候，你只要下载升级分发包。</para>

      <para>要升级Nexus，只要下载“upgrade”分发包，而非“bundle”分发包。升级分发包的内容存储在一个包含nexus版本号（如<filename>nexus-1.0.0-beta-3</filename>）的文件夹中。这个文件夹可以解开至<filename>$NEXUS_HOME/runtime/apps</filename>，不用覆盖当前安装版本的内容。</para>

      <screen>$ <command>cd $NEXUS_HOME/runtime/apps</command>
$ <command>unzip nexus-1.0.0-beta-3-upgrade.zip</command></screen>

      <para>如果你下载了GZip归档的<acronym>TAR</acronym>文件，运行：</para>

      <screen>$ <command>cd $NEXUS_HOME/runtime/apps</command>
$ <command>tar xvzf nexus-1.0.0-beta-3-upgrade.tgz</command></screen>

      <para>当升级归档文件解压至<filename>$NEXUS_HOME/runtime/apps</filename>后，你必须从之前的Nexus版本复制配置文件至新安装的版本。从<filename>$NEXUS_HOME/runtime/apps/nexus/conf/nexus.xml</filename>复制<filename>nexus.xml</filename>至<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-3/conf</filename>。你应该也复制所有你自定义的日志配置文件<filename>log4j.properties</filename>和<filename>jul-logging.properties</filename>。在你从当前的Nexus版本复制了配置文件至新版本的Nexus后，停止Nexus服务器。</para>

      <para>现在，你需要重命名<filename>$NEXUS_HOME/runtime/apps/nexus</filename>目录为一个反映它旧版本号的名称。比如，在这个例子中<filename>$NEXUS_HOME/runtime/apps/nexus</filename>将成为<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-3</filename>。然后，将你新版本改为<filename>$NEXUS_HOME/runtime/apps/nexus</filename>。在Unix系统上，你需要创建一个符号链接<filename>$NEXUS_HOME/runtime/apps/nexus</filename>指向<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-2</filename>。在Windows系统上，你可能需要复制<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-2</filename>至<filename>$NEXUS_HOME/runtime/apps/nexus</filename>。在你用新版本的Nexus交换了旧版本的Nexus后，你应该能使用启动脚本启动Nexus。Nexus启动之后，检查<filename>$NEXUS_HOME/logs/wrapper.log</filename>。Nexus初始化之后，它会打印出Nexus版本号。</para>
    </section>
  </section>

  <section>
    <title>使用Nexus</title>

    <para>Nexus provides for anonymous access for users who only need to
    search repositories, browse repositories, and peruse the system feeds.
    This anonymous access level changes the navigation menu and some of the
    options available when you right-click on a repository. This read-only
    access displays a user interface shown in <xref
    linkend="fig-repoman-anonymous-interface" />.</para>

    <figure id="fig-repoman-anonymous-interface">
      <title>Nexus Interface for Anonymous Users</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/repository-manager_public-interface.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Browsing Repositories</title>

      <para>One of the most straight-forward uses of the Nexus is to browse
      the structure of a Maven repository. If you click on the Browse
      Repositories menu item in the Views menu, you should see the following
      display. The top-half of <xref linkend="fig-nexus-browse-repo" /> shows
      you a list of groups and repositories along with the type of the
      repository and the repository status.</para>

      <figure id="fig-nexus-browse-repo">
        <title>Browsing a Nexus Repository</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_browse-repositories.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>When you are browsing a repository, you can right click on any
      file and download it directly to your browser. This allows you to
      retrieve specific artifacts manually, or examine a
      <acronym>POM</acronym> file in the browser.</para>
    </section>

    <section>
      <title>Browsing Groups</title>

      <para>Nexus contains ordered groups of repositories which allow you to
      expose a series of repositories through a single <acronym>URL</acronym>.
      More often than not, an organization is going to point Maven at the two
      default Nexus groups: Public Repositories and Public Snapshot
      Repositories. Most end-users of Nexus are not going to know what
      artifacts are being served from what specific repository, and they are
      going to want to be able to browse the Public Repository. To support
      this use case, Maven allows you to browse the contents of a Nexus Group
      as if it were a single merged repository with a tree structure. <xref
      linkend="fig-nexus-browse-group" /> shows the browsing interface with a
      Nexus Group selected for browsing. There is no difference to the user
      experience of browsing a Nexus Group vs. browsing a Nexus
      Repository.</para>

      <figure id="fig-nexus-browse-group">
        <title>Browsing a Nexus Group</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_browse-group.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Searching for Artifacts</title>

      <para>In the left-hand navigation area, there is a Artifact Search text
      field next to a magnifying glass. To search for an artifact by groupId
      or artifactId, type in some text and click the magnifying glass. Typing
      in the the search term "maven" and clicking the magnifying glass should
      yield a search result similar to <xref
      linkend="fig-nexus-search" />.</para>

      <figure id="fig-nexus-search">
        <title>Results of an Artifact Search for "maven"</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_artifact-search.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you've located the artifact you were looking for you can
      click on the Download link to download the artifact. Nexus is going to
      show you 50 results at a time, and provide links on the bottom of the
      search result panel for you to navigate through the search results. If
      you would prefer to see a list of all of the matching artifacts, you can
      select Fetch All from the drop down at the bottom of the search result
      panel.</para>

      <para>In addition to searching by a groupId or an artifactId, Nexus has
      a feature which allows you to search for an artifact by a
      checksum.</para>

      <warning>
        <para>Let me guess? You installed Nexus, ran to the search box, typed
        in the name of a group or an artifact, pressed search, and saw
        absolutely nothing. No results. Nexus isn't going to retrieve the
        remote repository indexes by default, you need to activate downloading
        of remote indexes for the three proxy repositories that Nexus ships
        with. Without these indexes, Nexus has nothing to search. Find
        instructions for activating index downloads in <xref
        linkend="sect-repoman-post-install" />.</para>
      </warning>
    </section>

    <section>
      <title>Browsing System Feeds</title>

      <para>Nexus provides feeds that capture system events, you can browse
      these feeds by clicking on System Feeds under the View menu. Clicking on
      System Feeds will show the panel in <xref
      linkend="fig-repoman-system-feeds" />. You can use these simple
      interface to browse the most recent reports of artifact deployments,
      cached artifacts, broken artifacts, and storage changes that have
      occurred in Nexus.</para>

      <figure id="fig-repoman-system-feeds">
        <title>Browsing Nexus System Feeds</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_system-feed.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>These feeds can come in handy if you are working at a large
      organization with multiple development teams deploying to the same
      instance of Nexus. If such an arrangement, all developers in an
      organization can subscribe to the <acronym>RSS</acronym> feeds for New
      Deployed Artifacts as a way to ensure that everyone is aware when a new
      release has been pushed to Nexus. Exposing these system events as
      <acronym>RSS</acronym> feeds also opens to the door to other, more
      creative uses of this information, such as connecting Nexus to external
      automated testing systems. To access the <acronym>RSS</acronym> feeds
      for a specific feed, select the feed in the System Feeds view panel and
      then click on the Subscribe button. Nexus will then load the
      <acronym>RSS</acronym> feed in your browse and you can subscribe to the
      feed in your favorite <acronym>RSS</acronym> reader.</para>

      <para>There are six system feeds available in the System Feeds view, and
      each has a <acronym>URL</acronym> which resembles the following
      <acronym>URL</acronym>:</para>

      <screen>http://localhost:8081/nexus/service/local/feeds/recentChanges</screen>

      <para>Where <varname>recentChanges</varname> would be replaced with the
      identifier of the feed you were attempting to read. Available system
      feeds include:</para>

      <table>
        <title>Available System Feeds</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Feed Identifier</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><varname>brokenArtifacts</varname></entry>

              <entry>Checksum mismatch, missing checksums, invalid
              POMs</entry>
            </row>

            <row>
              <entry><varname>recentCacheOrDeployments</varname></entry>

              <entry>New artifacts in all repositories (cached or
              deployed)</entry>
            </row>

            <row>
              <entry><varname>recentlyCached</varname></entry>

              <entry>New cached artifacts in all repositories</entry>
            </row>

            <row>
              <entry><varname>recentlyDeployed</varname></entry>

              <entry>New deployed artifacts in all repositories</entry>
            </row>

            <row>
              <entry><varname>recentChanges</varname></entry>

              <entry>All caches, deployments, or deletions</entry>
            </row>

            <row>
              <entry><varname>systemRepositoryStatusChanges</varname></entry>

              <entry>Automatic or User-initiated status changes
              (out-of-service and blocked proxies)</entry>
            </row>

            <row>
              <entry><varname>systemChanges</varname></entry>

              <entry>Booting nexus, changing configuration, re-indexing, and
              rebuilding of attributes</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Browsing Log Files and Configuration</title>

      <para>Logs and Config Files is only visible to Administrative users
      under the Views menu. Click on this option brings up the dialog shown in
      <xref linkend="fig-nexus-logs" />. From this screen you can view the
      following log and configuration files by clicking on the drop down
      selection next to the Download button.</para>

      <variablelist>
        <varlistentry>
          <term><filename>nexus.log</filename></term>

          <listitem>
            <para>Think of this as the general application log for Nexus.
            Unless you are an administrative user, you might not have must
            interest in the information in this log. If you are trying to
            debug an error, or if you have uncovered a bug in Nexus, you'll
            use this log viewer to diagnose problems with Nexus.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>nexus-rest-0.log</filename></term>

          <listitem>
            <para>The core Nexus server is really just a bunch of
            <acronym>REST</acronym> services, and the <acronym>UI</acronym>
            that you are using simply interacts with these
            <acronym>REST</acronym> services to configure and view Nexus
            Groups and Repositories. This log file is going to reflect
            activity generated by the Nexus <acronym>UI</acronym> interacting
            with the Nexus <acronym>REST</acronym> services.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>nexus.xml</filename></term>

          <listitem>
            <para>This XML file contains most of the configuration data for
            your instance of Nexus. It is stored in
            <filename>${NEXUS_HOME}/runtime/apps/nexus/conf/nexus.xml</filename>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig-nexus-logs">
        <title>Browsing Nexus Logs and Configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_log-file.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Changing Your Password</title>

      <para>If you have the appropriate security privilege, you will see an
      option to change your password in the left-hand side of the browser. To
      change your password, click on change password, supply your current
      password, and choose a new password. When you click on Change Password,
      your Nexus password will be changed.</para>

      <figure>
        <title>Changing Your Nexus Password</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_change-password.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section id="sect-conf-maven-nexus">
    <title>配置Maven使用Nexus</title>

    <para>要使用，你需要配置Maven去检查Nexus而非公共的仓库。为此，你需要编辑在你的<filename>~/.m2/settings.xml</filename>文件中的mirror配置。首先，我们会演示如何配置Maven去检查你的Nexus安装而非直接从中央Maven仓库获取构件。在我们覆盖了中央仓库并演示了Nexus可以工作之后，我们会转回来，提供一个更实际的，包含发布版和快照版的配置集合。</para>

    <section id="sect-simple-maven-nexus">
      <title>使用Nexus中央代理仓库</title>

      <para>要配置Maven去查阅Nexus而非中央Maven仓库，在你的<filename>~/.m2/settings.xml</filename>文件中添加如<xref
      linkend="ex-override-central" />的mirror配置。</para>

      <example id="ex-override-central">
        <title>为Nexus配置Maven Settings (~/.m2/settings.xml)</title>

        <programlisting language="xml">&lt;?xml version="1.0"?&gt;
&lt;settings&gt;
  ...
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;Nexus&lt;/id&gt;
      &lt;name&gt;Nexus Public Mirror&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  ...
&lt;/settings&gt;
</programlisting>
      </example>

      <para>在你将Nexus配置成所有仓库的镜像之后，Maven现在会从本地的Nexus安装查阅，而非去外面查阅中央Maven仓库。如果对Nexus有一个构件请求，本地的Nexus安装会提供这个构件。如果Nexus没有这个构件，Nexus会从远程仓库获取这个构件，然后添加至远程仓库的本地镜像。</para>

      <para>要测试Nexus如何工作的，从你的本地Maven仓库中删除一个目录，然后运行Maven构建。如果你删除了<filename>~/.m2/repository/org</filename>，你会删除一大堆的依赖（包括Maven
      插件）。下次你运行Maven的时候，你应该看到如下的信息：</para>

      <screen>$ <command>mvn clean install</command>
...
Downloading: http://localhost:8081/nexus/content/groups/public/...
3K downloaded
</screen>

      <para>这个输出应该能让你相信Maven正和你本地的Nexus通讯，而非向外面的中央Maven仓库获取构件。在你基于本地的Nexus运行过一些构建之后，你就可以浏览缓存在你本地Nexus中的内容。登陆Nexus然后点击导航菜单的左边的构件搜索。在搜索框中输入"maven"，你应该能看到一些像下面的内容。</para>

      <figure>
        <title>用"maven"搜索构件的结果</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_artifact-search.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>
    </section>

    <section>
      <title>使用Nexus作为快照仓库</title>

      <para><xref
      linkend="sect-simple-maven-nexus" />中的Maven配置能让你使用Nexus公共组，这个组从4个由Nexus管理的仓库解析构件，但是它不让你查阅<varname>public-snapshots</varname>组，该组包括了Apache和Codehaus的快照版。要配置Maven让它为发布版和插件都使用Nexus，你必须配置Maven，通过往你的Maven文件<filename>~/.m2/settings.xml</filename>中添加如下的镜像配置，使其查阅Nexus的组。</para>

      <example id="ex-maven-nexus-snap">
        <title>配置Maven使其为发布版和快照版使用Nexus</title>

        <programlisting language="xml">&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This is used to direct the public snapshots repo in the 
          profile below over to a different nexus group --&gt;
      &lt;id&gt;nexus-public-snapshots&lt;/id&gt;
      &lt;mirrorOf&gt;public-snapshots&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public-snapshots&lt;/url&gt;
    &lt;/mirror&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;development&lt;/id&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
      &lt;!--this profile will allow snapshots to be searched when activated--&gt;
      &lt;id&gt;public-snapshots&lt;/id&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;public-snapshots&lt;/id&gt;
          &lt;url&gt;http://public-snapshots&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;public-snapshots&lt;/id&gt;
          &lt;url&gt;http://public-snapshots&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;activeProfile&gt;development&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;</programlisting>

        <para>在<xref
        linkend="ex-maven-nexus-snap" />中我们定义了两个profile：<varname>development</varname>和<varname>public-snapshots</varname>。<varname>development</varname>
        profile被配置成从central仓库下载构件，通过一个假的<acronym>URL</acronym>
        <varname>http://central</varname>。<varname>public-snapshots</varname>被配置成从public-snapshot仓库下载构件，通过一个假的<acronym>URL</acronym>
        <varname>http://public-snapshots</varname>。这些假的<acronym>URL</acronym>被同一<filename>settings.xml</filename>文件中的两个mirror配置重写。第一个镜像被配置成覆盖public-snapshots仓库，而使用<varname>public-snapshots</varname>
        Nexus组。第二个镜像覆盖所有其它的仓库，而使用<varname>public</varname>
        Nexus组。有了这些配置，所有的构建都会包含<varname>public</varname>
        Nexus组，如果你想包含<varname>public-snapshots</varname>组，你必须添加profile的public-snapshots，通过在命令行使用如下的
        -P 标志。</para>

        <screen>$ mvn -Ppublic-snapshots clean install</screen>
      </example>
    </section>

    <section>
      <title>为缺少的依赖添加仓库</title>

      <para>如果你已经将你的Maven
      <filename>settings.xml</filename>配置成使用Nexus作为所有公共仓库和所有公共快照仓库的镜像，你可能会遇到一些项目不能够从你的本地Nexus获取需要的构件。这很常见，因为你经常会构建一些在<filename>pom.xml</filename>中自定义一组<varname>repositories</varname>和<varname>snapshotRepositories</varname>的项目。如果你正在构建开源项目，或者往你的配置中添加了自定义的第三方Maven仓库，那么这种情况就会发生。</para>

      <para>作为一个例子，让我们试试从我们签出的源代码构件Apache Shindig。什么是Apache
      Shindig?对该例来说这不重要；我们需要的是一个能很容易签出和构建的样例项目。如果你实在很想知道，Shindig是在Apache
      Incubator中的一个围绕Google的OpenSocial
      API的项目。Shindig目标是提供一个允许人们运行OpenSocial小工具的容器。它给我们提供了一个有趣的样例工程，因为它有一些没有被加入到中央Maven仓库的组建，于是依赖于一些自定义的Mavne仓库，使用Shindig我们可以向你展示当Nexus没有你要的构件的时候会发生什么，以及你能够使用怎样的步骤来给Nexus添加仓库。</para>

      <para>下面的样例假设你已经安装了Subversion，并且你正在命令行运行Subversion。我们使用Subversion从Apache
      Incubator签出Apache Shindig然后尝试构建它。为此，执行下面的命令：</para>

      <screen>$ <command>svn co http://svn.apache.org/repos/asf/incubator/shindig/trunk shindig</command>
... Subversion will checkout the trunk of Apache Shindig ...
$ <command>cd shindig</command>
$ <command>mvn install</command>
... Maven will build Shindig ...
Downloading: http://localhost:8081/nexus/content/groups/public/caja/caja/r820/caja-r820.pom
Downloading: http://localhost:8081/nexus/content/groups/public/caja/caja/r820/caja-r820.jar
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) caja:caja:jar:r820

  Try downloading the file manually from the project website.

...
----------
1 required artifact is missing.

for artifact: 
  org.apache.shindig:gadgets:war:1-SNAPSHOT

from the specified remote repositories:
  oauth (http://oauth.googlecode.com/svn/code/maven),
  central (http://central),
  apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository),
  caja (http://google-caja.googlecode.com/svn/maven)
</screen>

      <para>The build fails because it is unable to download an artifact. The
      artifact it was trying to download has a group identifier of
      <varname>caja</varname>, and artifactId of <varname>caja</varname>, and
      a version of <varname>r820</varname>. It is an artifact that is hosted
      on a custom repository <ulink
      url="http://google-caja.googlecode.com/svn/maven">http://google-caja.googlecode.com/svn/maven</ulink>.
      Maven failed to download this artifact because your
      <filename>settings.xml</filename> was configured to direct all mirrors
      to the <varname>public</varname> and <varname>public-snapshots</varname>
      groups hosted on our Nexus installation. Even though the
      <filename>pom.xml</filename> for Apache Shindig defined a repository and
      pointed it at <ulink
      url="http://google-caja.googlecode.com/svn/maven">http://google-caja.googlecode.com/svn/maven</ulink>,
      Nexus won't retrieve an artifact from a repository it doesn't know
      about. In fact, there are two repositories that Nexus doesn't know about
      in this build: <varname>caja</varname> and <varname>oauth</varname>.
      <ulink url="http://code.google.com/p/google-caja/">Caja</ulink> and
      <ulink url="http://code.google.com/p/oauth/">OAuth</ulink> are two
      libraries which are still in development. Both projects have been
      "released", and the versions that Shindig depends upon are certainly not
      SNAPSHOT releases, but these projects have not been published to the
      Central Maven Repository. We need to find a way to let Nexus know about
      these repositories before we can build this project.</para>

      <para>There are two ways to fix this problem. First, you can change your
      <filename>settings.xml</filename> to override specific repository
      identifiers. Instead of listing the Nexus public group as a
      <sgmltag>mirrorOf</sgmltag> all repositories, you could change the
      <sgmltag>mirrorOf</sgmltag> element in your
      <filename>settings.xml</filename> to "central". If you did this, Maven
      would then attempt to download the dependencies directly from the
      <varname>oauth</varname> and <varname>caja</varname> repositories at the
      <acronym>URL</acronym>s listed in the previous screen listing. This
      would work because Maven is only going to consult Nexus for repositories
      which match the repositories specified in the
      <sgmltag>mirrorOf</sgmltag> element in
      <filename>settings.xml</filename>. If Maven sees the repositories
      identifier <varname>caja</varname> or <varname>oauth</varname>, and
      doesn't see a mirror configured in your
      <filename>settings.xml</filename>, it is going to attempt to connect to
      the repository directly.</para>

      <para>The second, more interesting option is to add both of these
      repositories to Nexus and then add these repositories to the public
      group.</para>
    </section>

    <section>
      <title>添加一个新的仓库</title>

      <para>To add the caja repository, log into Nexus as an Administrator,
      and click on the Repositories link in the left-hand navigation menu in
      the Configuration section. Clicking on this link should bring up a
      window that lists all of the repositories which Nexus knows about.
      You'll then want to create a new proxy repository. To do this, click on
      the Add link which is directly above the list of repositories. When you
      click the Add button, click the down arrow directly to the right of the
      word Add, this will show a drop-down which has the options: Hosted,
      Proxy, and Virtual. Since you are creating a proxy repository, click on
      Proxy. Once you do this, you will see a screen resembling <xref
      linkend="fig-add-repo" />. Populate the required fields Repository ID
      and the Repository Name with "caja" and "Google Caja". Set the
      Repository Policy to "Release", and the Remote Storage Location to
      <ulink
      url="http://google-caja.googlecode.com/svn/maven">http://google-caja.googlecode.com/svn/maven</ulink>.</para>

      <figure id="fig-add-repo">
        <title>Adding a Nexus Repository</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_add-repository.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>Once, you've filled out this screen, click on the Save button.
      Nexus will then be configured with the caja proxy repository. Do the
      same thing for the oauth repository. Create a repository with the
      Repository ID of oauth, with a Release policy, and the Remote Storage
      Location of <ulink
      url="http://oauth.googlecode.com/svn/code/maven">http://oauth.googlecode.com/svn/code/maven</ulink>.</para>
    </section>

    <section>
      <title>添加一个仓库至一个组</title>

      <para>Next you will need to add both of these new repositories to the
      public Nexus Group. To do this, click on the Groups link in the
      left-hand navigation menu in the Configuration section. When you see the
      Group management screen, click on the public group. Clicking on the
      public group should bring up a screen which resembles <xref
      linkend="fig-add-to-group" />.</para>

      <figure id="fig-add-to-group">
        <title>Adding New Repositories to a Nexus Group</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_add-to-group.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>Nexus makes use of an interesting Javascript widget library named
      <ulink url="http://extjs.com/">ExtJS</ulink>. ExtJS provides for a
      number of interesting UI widgets that allow for rich interaction. To add
      the two new repositories to the <varname>public</varname> Nexus Group,
      find the repositories in the Available Repositories list, click on the
      repository you want to add and drag it to the Ordered Group
      Repositories. Once the repository is in the Ordered Group Repositories
      list you can click and drag the repository within that list to alter the
      order in which a repository will be searched for a matching artifact.
      Once the Google Caja and Google OAuth project repositories are added to
      the public Nexus Group, you should be able to build Apache Shindig and
      watch Maven download the Caja and OAuth artifacts from the respective
      repositories.</para>
    </section>
  </section>

  <section>
    <title>配置Nexus</title>

    <para>Many of the configuration screens shown in this section are only
    available to administrative users. Nexus allows the admin user to
    customize the list of repositories, create repository groups, customize
    server settings, and create routes or "rule" that Maven will use to
    include or exclude artifacts from a repository.</para>

    <section id="sect-repoman-server-conf" label="">
      <title>定制服务器配置</title>

      <para>In a real installation of Nexus, you'll probably want to customize
      the administrative password to something other than "admin123", and you
      might want to override the default directories that Nexus uses to store
      repository data. To do this, log in as the administrative user and click
      on Server under Configuration in the left-hand navigation menu. The
      server configuration screen is shown in <xref
      linkend="fig-nexus-server-config" />.</para>

      <figure id="fig-nexus-server-config">
        <title>Nexus Server Configuration</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_server-settings.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>This screen allows you to change:</para>

      <variablelist>
        <varlistentry>
          <term>Admin Password</term>

          <listitem>
            <para>The default admin password is <varname>admin123</varname>.
            If you fill out this field and click on the Save button, you can
            change the admin password for this installation of Nexus.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Working Directory</term>

          <listitem>
            <para>Under the File Settings group, you can customize the working
            directory. You may wish to customize the working directory if your
            Nexus installation is going to be mirroring very large
            repositories and you want to put your working directory on another
            partition.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Log Directory</term>

          <listitem>
            <para>You can change where Nexus looks for logs. On a Unix
            machine, a common practice is to place all log files under
            <filename>/var/log</filename>. If you wanted to follow this
            practice, you could create a <filename>/var/log/nexus</filename>
            directory with the appropriate permissions. Note that this setting
            does not change the logging directory used by Nexus, it simply
            tells Nexus where to look for the logs. To change the location of
            the logs, you will need to change the
            <filename>jul-logging.properties</filename> and
            <filename>log4j.properties</filename> files in the
            <filename>runtime/apps/nexus/conf</filename> directory of your
            Nexus installation.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>User Agent</term>

          <listitem>
            <para>This is the identifier which Nexus uses when it is making an
            <acronym>HTTP</acronym> request. You may want to change this if
            Nexus needs to use an <acronym>HTTP</acronym> Proxy, and the Proxy
            will only work if the User Agent is set to a specific
            value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Additional <acronym>URL</acronym> Parameters</term>

          <listitem>
            <para>This is a list of extra parameters to place on a
            <acronym>GET</acronym> request to a remote repository. You could
            use this to add identifying information to requests.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Request Timeout</term>

          <listitem>
            <para>The amount of time Nexus will wait for a request to succeed
            when interacting with an external, remote repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Request Retry Attempts</term>

          <listitem>
            <para>The number of times Nexus will retry a failed
            <acronym>HTTP</acronym> request.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Proxy Host and Proxy Post</term>

          <listitem>
            <para>If your organization requires that you use an
            <acronym>HTTP</acronym> proxy server, you can supply the proxy
            host and port in these configuration fields.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Proxy Authentication</term>

          <listitem>
            <para>This configuration section allows you to provide proxy
            authentication information such as a username and password or a
            key used to access an <acronym>HTTP</acronym> Proxy.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>管理仓库</title>

      <para>To manage the repositories which Nexus provides, log in as the
      administrative user and click on Repositories in the Configuration menu
      in the left-hand navigation menu. Nexus provides for three different
      kinds of repositories:</para>

      <variablelist>
        <varlistentry>
          <term>Proxy Repository</term>

          <listitem>
            <para>A proxy repository is a proxy of a remote repository. By
            default, Nexus ships with the following configured proxy
            repositories:</para>

            <variablelist>
              <varlistentry>
                <term>Apache Snapshots</term>

                <listitem>
                  <para>This repository contains snapshot releases from the
                  Apache Software Foundation
                  http://people.apache.org/repo/m2-snapshot-repository</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Codehaus Snapshots</term>

                <listitem>
                  <para>This repository contains snapshot released from
                  Codehaus http://snapshots.repository.codehaus.org/</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Central Maven Repository</term>

                <listitem>
                  <para>This is the central Maven repository (for releases).
                  http://repo1.maven.org/maven2/</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Hosted Repository</term>

          <listitem>
            <para>A hosted repository is a repository which is hosted by
            Nexus. Maven ships with the following configured hosted
            repositories:</para>

            <variablelist>
              <varlistentry>
                <term>3rd Party</term>

                <listitem>
                  <para>This hosted repository should be used for third-party
                  dependencies not available in the public Maven repositories.
                  Examples of these dependencies could be commercial,
                  proprietary libraries such as an Oracle JDBC driver that may
                  be referenced by your organization.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Releases</term>

                <listitem>
                  <para>This hosted repository is where your organization will
                  publish internal releases.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Snapshots</term>

                <listitem>
                  <para>This hosted repository is where your organization will
                  publish internal snapshots.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Virtual Repository</term>

          <listitem>
            <para>A virtual repository exists as an adapter to Maven 1. Nexus
            ships with a central-m1 virtual repository.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig-repo-config">
        <title>Repository Configuration Screen for a Proxy Repository</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_repository-config.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para><xref linkend="fig-repo-config" /> shows the Repository
      configuration screen for a Proxy repository in Nexus. From this screen,
      you can manage the settings for proxying an external repository. From
      this screen, you can configure:</para>

      <variablelist>
        <varlistentry>
          <term>Repository ID</term>

          <listitem>
            <para>The repository ID is the identifier which will be used in
            the Nexus URL. For example, the central proxy repository has an ID
            of "central", this means that maven can access the repository
            directly at
            http://localhost:8081/nexus/content/repositories/central. The
            Repository ID must be unique in a given Nexus installation. ID is
            required.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository Name</term>

          <listitem>
            <para>The display name for a repository. Name is required.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository Type</term>

          <listitem>
            <para>The type of repository (proxy, hosted, or virtual). You
            can't change the type of a repository, it is selected when you
            create a repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository Policy</term>

          <listitem>
            <para>If a proxy repository has a policy of release than it will
            only access released versions from the remote repository. If a
            proxy repository has a policy of snapshot, it will download
            snapshots from the remote repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Default Storage Location</term>

          <listitem>
            <para>Not editable, shown for reference. This is the default
            storage location for the local cached contents of the
            repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Override Storage Location</term>

          <listitem>
            <para>You can choose to override the storage location for a
            specific repository. You would do this if you were concerned about
            storage and wanted to put the contents of a specific repository
            (such as central) in a different location.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Remote Repository Access</term>

          <listitem>
            <para>This section tells Nexus where to look for and how to
            interact with the remote Maven repository being proxied.</para>

            <variablelist>
              <varlistentry>
                <term>Remote Storage Location</term>

                <listitem>
                  <para>This is the URL of the remote Maven repository.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Download Remote Indexes (Not shown in figure)</term>

                <listitem>
                  <para>This field controls the downloading of the remote
                  indexes. Currently only central has an index at <ulink
                  url="http://repo1.maven.org/maven2/.index">http://repo1.maven.org/maven2/.index</ulink>.
                  If enabled, Nexus will download the index and use that for
                  its searches as well as serve that up to any clients which
                  ask for the index (like m2eclipse). The default for new
                  proxy repositories is enabled, but all of the default
                  repositories included in Nexus have this option disabled. To
                  change this setting for one of the proxy repositories that
                  ship with Nexus, change the option, save the repository, and
                  then re-index the repository. Once this is done, artifact
                  search will return every artifact available on the Central
                  Maven repository. <xref linkend="sect-manage-repo" />
                  details the process for re-indexing a repository.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Checksum Policy</term>

                <listitem>
                  <para>Sets the checksum policy for a remote repository. This
                  option is set to <varname>Warn</varname> by default. The
                  possible values of this setting are:</para>

                  <itemizedlist>
                    <listitem>
                      <para><varname>Ignore</varname> - Ignore the checksums
                      entirely</para>
                    </listitem>

                    <listitem>
                      <para><varname>Warn</varname> - Print a warning in the
                      log if a checksum is not correct</para>
                    </listitem>

                    <listitem>
                      <para><varname>StrictIfExists</varname> - Refuse to
                      cache an artifact if the calculated checksum is
                      inconsistent with a checksum in the repository. Only
                      perform this check if the checksum file is
                      present.</para>
                    </listitem>

                    <listitem>
                      <para><varname>Strict</varname> - Refuse to cache an
                      artifact if the calculated checksum is inconsistent or
                      if there is no checksum for an artifact.</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Authentication</term>

                <listitem>
                  <para>This section allows you to set a Username, Password,
                  Private Key, Key Passphrase, NT LAN Host, and NT Lan Manager
                  Domain for a remote repository.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Access Settings</term>

          <listitem>
            <para>This section configures access settings for a
            repository.</para>

            <variablelist>
              <varlistentry>
                <term>Allow Deployment</term>

                <listitem>
                  <para>If allow deployment is set to true, Nexus will allow
                  Maven to deploy artifacts to this repository. Allow
                  deployment only makes sense for Hosted repositories.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Allow File Browsing</term>

                <listitem>
                  <para>When set to true, users can browse the contents of the
                  repository with a web browser.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Include in Search</term>

                <listitem>
                  <para>When set to true, this repository is search when you
                  perform an Artifact Search in Nexus. If this setting is
                  false, the contents of the repository are excluded from a
                  search.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Expiration Settings</term>

          <listitem>
            <para>Nexus maintains a local cache of artifacts and metadata, you
            can configure expiration parameters for a proxy repository. The
            expiration settings are:</para>

            <variablelist>
              <varlistentry>
                <term>Not Found Cache TTL</term>

                <listitem>
                  <para>If Nexus fails to locate an artifact, it will cache
                  this result for a given number of minutes. In other words,
                  if Nexus can't find an artifact in a remote repository, it
                  will not repeated attempt to resolve this artifact until the
                  Not Found Cache TTL time has been exceeded. The default for
                  this setting is 1440 minutes (or 24 hours).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Artifact Max Age</term>

                <listitem>
                  <para>Tells Nexus when that maximum age of an artifact is
                  before it retrieves a new version from the remote
                  repository. The default for this setting is -1 for a
                  repository with a Release policy and 1440 for a repository
                  with Snapshot policy.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Metadata Max Age</term>

                <listitem>
                  <para>Nexus retrieves metadata from the remote repository.
                  It will only retrieve updates to metadata after the Metadata
                  Max Age has been exceeded. The default value for this
                  setting is 1440 minutes (or 24 hours).</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>HTTP Request Settings</term>

          <listitem>
            <para>This section lets you change the properties of the HTTP
            request to the remote repository. In this section you can
            configure the User Agent of the request, add parameters to a
            request, and set the timeout and retry behavior. This section
            refers to the HTTP request made from Nexus to the remote Maven
            repository being proxied.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>HTTP Proxy Settings</term>

          <listitem>
            <para>This section lets you configure the HTTP Proxy for the
            request from Nexus to the remote repository. You can configure a
            proxy host and port plus an authentication settings you need tell
            Nexus to use an HTTP Proxy for all requests to a remote
            repository.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>管理组</title>

      <para>Groups are a powerful feature of Nexus, they allow you to combine
      multiple repositories in a single URL. Nexus ships with two groups:
      public and public-snapshots. The public group combines the three hosted
      repositories: 3rd Party, Releases, and Snapshots with the Central Maven
      repository. The public-snapshots repository combines the Apache
      Snapshots and Codehaus Snapshots repositories. In <xref
      linkend="sect-conf-maven-nexus" /> we configured Maven via the
      <filename>settings.xml</filename> to look for artifacts in the
      <varname>public</varname> group managed by Nexus. <xref
      linkend="fig-group-config" /> shows the group configuration screen in
      Nexus, in this figure you can see the contents of the
      <varname>public</varname> group.</para>

      <figure id="fig-group-config">
        <title>Group Configuration Screen in Nexus</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_group-config.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>Note that the order of the repositories listed in Order Group
      Repositories is important. When Nexus searches for an artifact in a
      group of repositories it will return the first match. To reorder a
      repository in this list, click and the drag the repositories in the
      Ordered Group Repositories selection list.</para>
    </section>

    <section>
      <title>Managing Routes</title>

      <para>Nexus Routes are like filters you can apply to Nexus Groups, they
      allow you to configure Nexus to include or exclude repositories from a
      particular artifact search when Nexus is trying to locate an artifact in
      a Nexus Group. There are a number of different scenarios in which you
      might configure a route in Nexus, the most common is when you want to
      make sure that you are retrieving artifacts in a particular group ID
      from a particular repository. This is especially useful when you want to
      make sure that you are trying to retrieve your own organization's
      artifacts from the hosted Release and Snapshot repositories. Nexus
      Routes are applicable when you are trying to resolve an artifact from a
      Nexus Group; using Routes allow you to modify the repositories Nexus
      will consult when it tries to resolve an artifact from a group of
      repositories.</para>

      <figure id="fig-route-config">
        <title>Routes Configuration Screen in Nexus</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_route-config.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para><xref linkend="fig-route-config" /> shows the Route Configuration
      screen. Clicking on a route will bring up a screen which will allow you
      to configure the properties of a route. The configuration options
      available for a route are:</para>

      <variablelist>
        <varlistentry>
          <term>URL Pattern</term>

          <listitem>
            <para>This is the pattern which Nexus will use to match a request
            to Nexus. If the regular expression in this pattern is matched,
            Nexus will either include or exclude the listed repositories from
            a particular artifact query. In <xref
            linkend="fig-route-config" /> the two patterns are:</para>

            <variablelist>
              <varlistentry>
                <term>.*/(com|org)/somecompany/.*</term>

                <listitem>
                  <para>This pattern would match all of the paths which
                  included either "/com/somecompany/" or "/org/somecompany".
                  The expression in the parenthesis matches either com or org,
                  and the ".*" matches one or more characters. You would use a
                  route like this to match your own organization's artifacts
                  and map these requests to the hosted Nexus Releases and
                  Snapshots repositories.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>.*/org/some-oss/.*</term>

                <listitem>
                  <para>This pattern is used in an exclusive route. It matches
                  every path that contains "/org/some-oss/". This particular
                  exclusive route excludes the local hosted Releases and
                  Snapshots directory for all artifacts which match this path.
                  When Nexus tries to resolve artifacts that match this path,
                  it will exclude the Releases and Snapshots
                  repositories.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Rule Type</term>

          <listitem>
            <para>Rule Type can be either "inclusive" or "exclusive". An
            inclusive rule type defines the set of repositories which should
            be searched for artifacts when the <varname>URL</varname> pattern
            has been matched. An exclusive rule type defines repositories
            which should not be searched for a particular artifact.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Ordered Route Repositories</term>

          <listitem>
            <para>This is an ordered list of repositories which Nexus will
            search to locate a particular artifact. Nexus searches top to
            bottom; if it’s looking for an artifact, it will return the first
            match. When Nexus is looking for metadata, all repositories in a
            group are checked and the results are merged. The merging is
            applied giving preference to the earlier repositories. This is
            relevant when a project is looking for a <varname>LATEST</varname>
            or a <varname>RELEASE</varname> version. Within a Nexus Group, you
            should define the release repositories before the snapshot
            repositories, otherwise <varname>LATEST</varname> may incorrectly
            resolve to a snapshot version.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In this figure you can see the two dummy Routes that Nexus has as
      default routes. The first route is an inclusive route, it is provided as
      an example of a custom route an organization might use to make sure that
      internally generated artifacts are resolved from the Releases and
      Snapshots repositories. If your organization's group IDs all start with
      com.somecompany, and if you deploy internally generated artifacts to the
      Releases and Snapshots repositories, this Route will make sure that
      Nexus doesn't waste time trying to resolve these artifacts from public
      Maven repositories like the Central Maven Repository or the Apache
      Snapshots repository.</para>

      <para>The second dummy route is an exclusive route. This route excludes
      the Releases and Snapshots repositories when the request path contains
      "/org/some-oss". This example might make more sense if we replaced
      "some-oss" with "apache" or "codehaus". If the pattern was
      "/org/apache", this rule is telling Nexus to exclude the internal
      Releases and Snapshots repositories when it is trying to resolve these
      dependencies. In other words, don't bother looking for an Apache
      dependency in your organization's internal repositories.</para>

      <para>What if there is a conflict between two routes? Nexus will process
      inclusive routes before it will process the exclusive routes. Remember
      that Nexus Routes only affect Nexus' resolution of artifacts when it is
      searching a Group. When Nexus starts to resolve an artifact from a Nexus
      Group it will start with the list of repositories in a group. If there
      are matching inclusive routes, Nexus will then take the intersection of
      the repositories in the Group and the repositories in the inclusive
      Nexus Route. The order as defined in the Nexus Group will not be
      affected by the Inclusive routes. Nexus will then take the result of
      applying the inclusive routes and apply the exclusive routes to this new
      group. The resulting list is then searched for a matching
      artifact.</para>

      <para>To summarize, there are creative possibilities with Routes that
      the designers of Nexus may not have anticipated, but we advise you to
      proceed with caution if you start relying on conflicting or overlapping
      Routes. Use Routes sparingly, and use course URL patterns, as Nexus
      evolves there will be more features which allow for more fine grained
      rules to allow you to prohibit requests for specific artifacts and
      specific versions of artifacts. Remember that routes are only applied to
      Nexus Groups, routes are not used when an artifact is requested from a
      specific repository.</para>
    </section>

    <section>
      <title>网络配置</title>

      <para>By default, Nexus listens on port 8081. You can change this port,
      by changing the value in
      <filename>${NEXUS_HOME}/conf/plexus.properties</filename> this file is
      shown in <xref linkend="ex-plexus-props" />. To change the port, stop
      Nexus, change the value of <varname>applicationPort</varname> in this
      file, and then restart Nexus. Once you do this, you should see a log
      statement in <filename>${NEXUS_HOME}/logs/wrapper.log</filename> telling
      you that Nexus is listening on the altered port.</para>

      <example id="ex-plexus-props">
        <title>Contents of ${NEXUS_HOME}/conf/plexus.properties</title>

        <programlisting>applicationPort=8081
runtime=${basedir}/runtime
apps=${runtime}/apps
work=${runtime}/work
webapp=${runtime}/apps/nexus/webapp
nexus.configuration=${runtime}/apps/nexus/conf/nexus.xml</programlisting>
      </example>
    </section>
  </section>

  <section id="sect-manage-repo">
    <title>维护仓库</title>

    <para>Once you've setup a series of repositories and grouped those
    repositories into Nexus Groups, users will be able to see a list of
    repositories in the Nexus UI by clicking on the Repositories link in the
    left-hand navigation menu in the Maintenance section. This will bring up a
    list of repositories. This list will show you the status of the remote
    repository; to test this, edit one of your repositories to have a garbage
    Remote Storage Location URL, you will then notice that the status of this
    repository will change on the Manage Repositories screen. Clicking on a
    repository will bring up a tree view that provides users with a way to
    navigate through the contents of a repository.</para>

    <para>Right-clicking on a repository will bring up a series of actions
    which can be applied to a repository. The available actions for each
    repository are:</para>

    <variablelist>
      <varlistentry>
        <term>View</term>

        <listitem>
          <para>Loads the Tree View of a Repository. This view lets you
          drill-down into specific directories to view the contents of a
          repository.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Clear Cache</term>

        <listitem>
          <para>Clears the cache for the repository. This causes Nexus to
          check the remote repository for new updates or snapshots. It also
          resets the Not Found Cache.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Re-Index</term>

        <listitem>
          <para>Causes Maven to re-index a repository. Nexus will recreate the
          index it uses to search for a request artifact. If the repository
          has been configured to download the remote index, this option will
          cause Nexus to download the remote index from the remote repository.
          Note that if you have enabled the remote index download, the remote
          index may take some time to download from the remote repository. You
          will know that the remote repository has been updated for a large
          remote repository like Central when the Artifact Search results
          start showing artifacts which haven't been cached or
          requested.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Block Proxy / Allow Proxy</term>

        <listitem>
          <para>This toggles requests to the remote repository. If the proxy
          is blocked, Nexus will not connect to the remote repository for
          updates. To re-enable remote access, right click on a repository and
          select Allow Proxy. This option is useful when you want to control
          what is being served from a proxy repository. If you want to
          maintain strict control over what is being downloaded from a remote
          repository, you can run your organization's build against Nexus, and
          then Block all Proxy repositories.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Put Out of Service / Put In Service</term>

        <listitem>
          <para>This option allows you to bring a repository out of service
          and make it unavailable. Nexus will refuse to serve artifacts to
          Maven from a repository which is not in service. One you've made a
          repository unavailable, you can bring it back by right-clicking on a
          repository and selecting "Put In Service".</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>部署构件至Nexus</title>

    <para>Different organizations have different reasons for deploying
    artifacts to an internal repository. In large organizations with hundreds
    (or thousands) of developers, an internal Maven repository can be an
    efficient way for different departments to share releases and development
    snapshots with one another. Most organizations which use Maven will
    eventually want to start deploying both releases and artifacts to a
    shared, internal repository. Using Nexus, it is easy to deploy artifacts
    to Nexus hosted repositories.</para>

    <para>To deploy artifacts to Nexus supply the repository
    <acronym>URL</acronym> in <sgmltag>distributionManagement</sgmltag> and
    run <command>mvn deploy</command>. Maven will push project
    <acronym>POM</acronym>s and artifacts to your Nexus installation with a
    simple <acronym>HTTP</acronym> PUT. The initial release of Nexus does not
    provide for any security for hosted repositories. If you've enabled
    deployment for a hosted repository, anyone can connect to and deploy an
    artifact to the repository. If your Nexus installation is accessible from
    the public Internet, you will definitely want to disable deployment to
    these repositories or place your Nexus installation behind a web-server
    like Apache <acronym>HTTPD</acronym>.</para>

    <para>No extra wagon extension is needed in your project's
    <acronym>POM</acronym>. Nexus works with Maven's built in
    <varname>wagon-http-lightweight</varname>.</para>

    <section>
      <title>部署发布版</title>

      <para>To deploy a release artifact to Nexus you need to configure a
      <sgmltag>repository</sgmltag> in the
      <sgmltag>distributionManagement</sgmltag> section of your project's
      <acronym>POM</acronym>. <xref linkend="fig-deploy-release" /> shows an
      example of a release deployment repository which is configured to point
      to the releases repository at <ulink
      url="http://localhost:8081/nexus/content/repositories/releases">http://localhost:8081/nexus/content/repositories/releases</ulink>.</para>

      <example id="fig-deploy-release">
        <title>Configuring Release Repository for Deployment</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;distributionManagement&gt;
    ...
    &lt;repository&gt;
      &lt;id&gt;releases&lt;/id&gt;
      &lt;name&gt;Internal Releases&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/repositories/releases&lt;/url&gt;
    &lt;/repository&gt;
    ...
  &lt;/distributionManagement&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>You would replace <varname>localhost:8081</varname> with the host
      and port of your Nexus installation. Once your project has this
      configuration, you can deploy an artifact by executing mvn
      deploy:</para>

      <screen>$ <command>mvn deploy</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   Sample Project
[INFO] ------------------------------------------------------------------------
[INFO] Building Sample Project
[INFO]    task-segment: [deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing ~/svnw/sample/pom.xml to ~/.m2/repository/sample/sample\
                                            /1.0/sample-1.0.pom
[INFO] [deploy:deploy]
altDeploymentRepository = null
[INFO] Retrieving previous build number from snapshots
Uploading: http://localhost:8081/nexus/content/repositories/releases/\
           sample/sample/1.0/sample-1.0.pom
24K uploaded
</screen>

      <para>Note that Nexus can support multiple hosted repositories; you
      don't need to stick with the default <varname>releases</varname> and
      <varname>snapshots</varname> repositories. You can create different
      hosted repositories for different departments and then combine multiple
      repositories into a single Nexus group.</para>
    </section>

    <section>
      <title>部署快照版</title>

      <para>To deploy a snapshot artifact to Nexus you need to configure a
      <sgmltag>snapshotRepository</sgmltag> in the
      <sgmltag>distributionManagement</sgmltag> section of your project's
      <acronym>POM</acronym>. <xref linkend="fig-deploy-snapshot" /> shows an
      example of a snapshot deployment repository which is configured to point
      to the <varname>snapshots</varname> repository at <ulink
      url="http://localhost:8081/nexus/content/repositories/snapshots">http://localhost:8081/nexus/content/repositories/snapshots</ulink>.</para>

      <example id="fig-deploy-snapshot">
        <title>Configuring Snapshot Repository for Deployment</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;distributionManagement&gt;
    ...
    &lt;snapshotRepository&gt;
      &lt;id&gt;Snapshots&lt;/id&gt;
      &lt;name&gt;Internal Snapshots&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots&lt;/url&gt;
    &lt;/snapshotRepository&gt;
    ...
  &lt;/distributionManagement&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>You would replace <varname>localhost:8081</varname> with the host
      and port of your Nexus installation. Once your project has this
      configuration, you can deploy an artifact by executing <command>mvn
      deploy</command>. Maven will deploy to the
      <sgmltag>snapshotRepository</sgmltag> if your project's has a snapshot
      version (i.e. <varname>1.0-SNAPSHOT</varname>):</para>

      <screen>$ <command>mvn deploy</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   Sample Project
[INFO] ------------------------------------------------------------------------
[INFO] Building Sample Project
[INFO]    task-segment: [deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing ~/svnw/sample/pom.xml to ~/.m2/repository/sample/sample\
                                            /1.0-SNAPSHOT/sample-1.0-20080402.125302.pom
[INFO] [deploy:deploy]
altDeploymentRepository = null
[INFO] Retrieving previous build number from snapshots
Uploading: http://localhost:8081/nexus/content/repositories/releases/\
           sample/sample/1.0-SNAPSHOT/sample-1.0-20080402.125302.pom
24K uploaded
</screen>
    </section>

    <section>
      <title>部署第三方构件</title>

      <para>Your Maven projects may start depending on an artifacts which are
      not available from the Central Maven repository or any other public
      Maven repository. This can happen for a number of reasons: maybe the
      artifact in question is a <acronym>JDBC</acronym> driver for a
      proprietary database like Oracle, or maybe you are depending on another
      <acronym>JAR</acronym> that is neither open-source nor freely available.
      In these cases, you are going to have to get your hands on the artifact
      in question in publish it to your own repository. Nexus provides a
      hosted "third-party" repository for just this purpose.</para>

      <para>To illustrate the process of publishing an artifact to the
      third-party repository, we will use a real artifact: the Oracle
      <acronym>JDBC</acronym> Drivers. Oracle publishes a widely-used
      commercial database product which has a <acronym>JDBC</acronym> driver
      that is not present in the Central Maven repository. While the Central
      Maven repository maintains some <acronym>POM</acronym> information for
      the Oracle <acronym>JDBC</acronym> driver at <ulink
      url="http://repo1.maven.org/maven2/com/oracle/ojdbc14/10.2.0.3.0/">http://repo1.maven.org/maven2/com/oracle/ojdbc14/10.2.0.3.0/</ulink>,
      there is only a <acronym>POM</acronym> which references the Oracle site.
      If you add the following dependency to your project:</para>

      <example>
        <title>Oracle JDBC JAR Dependency</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;com.oracle&lt;/groupId&gt;
      &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;
      &lt;version&gt;10.2.0.3.0&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>Running a Maven build with this dependency, will produce the
      following output:</para>

      <screen>$ <command>mvn install</command>
...
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) com.oracle:ojdbc14:jar:10.2.0.3.0

  Try downloading the file manually from: 
      http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html

  Then, install it using the command: 
      mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 \
               -Dversion=10.2.0.3.0 -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: \
      mvn deploy:deploy-file -DgroupId=com.oracle -DartifactId=ojdbc14 \
                 -Dversion=10.2.0.3.0 -Dpackaging=jar -Dfile=/path/to/file \
                 -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
  	1) sample:sample:jar:1.0-SNAPSHOT
  	2) com.oracle:ojdbc14:jar:10.2.0.3.0

----------
1 required artifact is missing.
</screen>

      <para>The Maven build fails because it can't find the Oracle
      <acronym>JDBC</acronym> driver in the Maven repository. To remedy this
      situation, you are going to need to publish the Oracle
      <acronym>JDBC</acronym> artifact to your Nexus third-party repository.
      To do this, download the Oracle <acronym>JDBC</acronym> driver from
      <ulink
      url="http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html">http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html</ulink>
      and save it to the file <filename>ojdbc.jar</filename>. To deploy this
      file to Nexus, execute the following command:</para>

      <screen>$ <command>mvn deploy:deploy-file -DgroupId=com.oracle -DartifactId=ojdbc14 \</command>
&gt; <command>-Dversion=10.2.0.3.0 -Dpackaging=jar -Dfile=ojdbc.jar \</command>
&gt; <command>-Durl=http://localhost:8081/nexus/content/repositories/thirdparty \</command>
&gt; <command>-DrepositoryId=thirdparty</command>
...
[INFO] [deploy:deploy-file]
Uploading: http://localhost:8081/nexus/content/repositories/thirdparty/\
                  com/oracle/ojdbc14/10.2.0.3.0/ojdbc14-10.2.0.3.0.jar
330K uploaded
[INFO] Retrieving previous metadata from thirdparty
[INFO] Uploading repository metadata for: 'artifact com.oracle:ojdbc14'
[INFO] Retrieving previous metadata from thirdparty
[INFO] Uploading project information for ojdbc14 10.2.0.3.0
</screen>

      <para>After you run <command>mvn deploy:deploy-file</command>, this
      artifact will be published to the third-party repository in
      Nexus.</para>
    </section>
  </section>
</chapter>