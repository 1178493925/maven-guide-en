<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="profiles">
  <title>构建Profile</title>

  <section id="profiles-what">
    <title>Profile是用来做什么的?</title>

    <para>Profile能让你为一个特殊的环境自定义一个特殊的构建；profile使得不同构建环境间的可移植成为可能。</para>

    <para>不同的构建环境是什么意思？两个构建环境的例子是产品环境和开发环境。当你在开发环境中工作时，你的系统可能被配置成读取运行在你本机的开发数据库实例，而在产品环境中，你的系统被配置成从产品数据库读取数据。Maven能让你定义任意数量的构建环境（构建profile），这些定义可以覆盖任何<filename>pom.xml</filename>中的配置。你可以配置你的应用程序，在“开发”profile中，读取本地的开发数据库实例，在“产品”profile中，访问产品数据库。Profile也可以通过环境和平台被激活，你可以自定义一个构建，它根据不同的操作系统或者不同的<acronym>JDK</acronym>版本表现不同。在我们讨论使用和配置Maven
    profile之前，我们需要定义构建可移植性的概念。</para>

    <section>
      <title>什么是构建可移植性</title>

      <para>一个构建的“可移植性”是指将一个项目在不同的环境中构建的难易度。一个不用做任何自定义配置或者属性文件配置就能工作的构建，比一个需要很多配置才能工作的构建，具有更高的可移植性。构建可移植性最高的项目往往是一些开源项目如Apache
      Commons或者Apache
      Velocity，它们带有Maven构建，不需要或者需要很少的自定义配置。简言之，可移植性最高的项目往往“开箱可用”，而可移植性最低的构建则需要你跳过一个个难缠的框框，配置平台相关的路径以定位构建工具。在我们展示如何实现构建移植性之前，先浏览下我们讨论的不同种类的构建可移植性。</para>

      <section>
        <title>不可移植构建</title>

        <para>缺少可移植性正式所有构建工具试图防止的——然后，任何工具都能配置成不可移植（即使Maven）。一个不可移植的项目只有在一组特定的环境和标准（比如，你的本地机器）下能构建。除非你自己一个人工作，没有任何计划将你的应用部署到其它机器上，否则最好要完全避免不可移植性。一个不可移植的构建只能在单独的机器上运行，是“一次性的”。Maven设计提供了使用profile自定义构建的能力，阻止不可移植的构建。</para>

        <para>当一个新的开发人员得到不可移植项目的源码的时候，如果不重写大部分的构建脚本，他就不能构建这个项目。</para>
      </section>

      <section>
        <title>环境可移植性</title>

        <para>如果一个构建有一种机制，能针对不同的环境有定制的行为和配置，那么我们就说该构建具有环境可移植性。例如，一个项目在测试环境中包含一个对于测试数据库的引用，而在产品环境中则引用了产品数据库，那么该项目的构建是环境可移植的。这很有可能是因为该构建针对不同的环境有不同的属性组。当你转移到一个不同的环境中，该环境未被定义也没有为其创建profile，那么项目将不能工作。因此，该项目也只是在一定义的环境中可移植。</para>

        <para>当你一个新的开发人员得到环境可移植项目的源码，他们必须在一定以的环境中运行此构建，否则就需要创建自定义的环境才能构建项目。</para>
      </section>

      <section>
        <title>组织（内部）可移植性</title>

        <para>这一层可移植性的中心是一个项目可能需要访问一些内部资源如源码控制系统或者内部维护的Maven仓库。大公司的项目可能依赖于一个只对内部开发人员可用的数据库，而一个开源项目可能需要一个特定级别的证书来发布web站点，以及将构建的产品发布到公共仓库。</para>

        <para>如果你试图在内部网络外部（例如，在公司的防火墙外面）从零开始构建一个内部项目，构建会失败。它失败的原因可能是一些必须的自定义插件不可用，或者项目的依赖找不到，因为你没有适当的证书从一个自定义的远程仓库获取依赖。这样的项目只有在一个组织内部的环境中拥有可移植性。</para>
      </section>

      <section>
        <title>广泛（全局）可移植性</title>

        <para>任何人都可以下载具有广发可移植性项目的源码，不用为特定的环境自定义构建就能编译，安装。这是最高级别的可移植性；构建这样的项目不需要做任何额外的工作。该级别的可移植性对开源项目尤为重要，因为开源项目的潜在贡献者需要能很方便的下载源码进行构建。</para>

        <para>任何一个开发者都可以下载具有广泛可移植性项目的源码。</para>
      </section>
    </section>

    <section>
      <title>选择一个适当级别的可移植性</title>

      <para>很显然，你需要避免创建出最坏的情况：不可移植构建。你可以不幸需要在这样的一个组织工作或学习：其核心应用的构建是不可移植的。在这样的组织下，没有特定的人员或机器的帮助，你就不可能部署一个应用。如果不和那个维护该不可移植构建的人协调，很难引入新的项目依赖或变化。当个人或小组需要控制项目如何以及何时构建部署的时候，不可移植构建就会由于一些政治环境因素高速增长。“我们该如何构建该系统？哦，我们需要找到Jack，让他帮我们构建，没有其他人能将其部署到产品环境中”这是一种非常危险的情形，该情形比你想象的普遍得多。如果你为这样的一个组织工作，Maven和Maven
      profile能帮你脱离困境。</para>

      <para>与之完全相反的可移植性范围是广泛可移植性构建。总的来说广泛可移植性构建是最难达到的构建系统。这样的构建严格要求你依赖的项目和工具是免费分发的，在公共环境中可用。很多商业软件包可能被排除在这种可移植性最高的构建外面，因为只有在接受某个许可证后你才能下载它们。广泛可移植性也限制它的依赖能以Maven构件的形式分发。例如，如果你依赖于Oracle
      JDBC驱动，你的用户就需要手工下载安装它们；这就不是广泛可移植性因为你必须为那些有兴趣构建你应用的人发布一组关于创建环境的指令。而另一方面，你可以使用一个在公共Maven仓库中可用的JDBC驱动如MySQL或者HSQLDB。</para>

      <para>如之前叙述的那样，开源项目从拥有最广泛的可移植性构建获益。广泛可移植性构建降低了为开源项目做贡献的低效性。在一个开源项目（如Maven）中，有两个单独的组：最终用户和开发者。当一个项目的最终用户决定为项目贡献一个补丁，它们就需要从使用构建输出过渡到运行一个构建。它们首先需要成为开发者，而如果很难学会如何构建一个项目，这就成为了最终用户花时间为项目做贡献的妨碍因素。在广泛可移植项目中，最终用户不需要遵循一组神秘的构建指令来开始成为开发者。他们可以源码，修改源码，构建，然后提交贡献，这个过程不需要问谁要求帮助建立构建环境。当为开源项目贡献源码的成本更低的时候，你就会看到源码贡献的增长，特别是一些不经意的贡献可能对项目的成功和项目的失败造成很大的影响。在一组广泛的开源项目中使用Maven的一个附加作用就是它使得开发者为不同的开源项目贡献源码变得更加容易。</para>
    </section>
  </section>

  <section>
    <title>通过Maven Profiles实现可移植性</title>

    <para>Maven中的profile是一组可选的配置，可以用来设置或者覆盖配置默认值。有了profile，你就可以为不同的环境定制构建。profile可以在<filename>pom.xml</filename>中配置，并给定一个id。然后你就可以在运行Maven的时候使用的命令行标记告诉Maven运行特定profile中的目标。以下<filename>pom.xml</filename>使用<literal>production</literal>
    profile覆盖了默认的Compiler插件设置。</para>

    <example>
      <title>使用一个Maven Profile覆盖Compiler插件设置</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
  &lt;artifactId&gt;simple&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;simple&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;profiles&gt;<co id="coDef-profiles-compile-1"
          linkends="coRef-profiles-compile-1" />
    &lt;profile&gt;
      &lt;id&gt;production&lt;/id&gt;<co id="coDef-profiles-compile-2"
          linkends="coRef-profiles-compile-2" />
      &lt;build&gt;<co id="coDef-profiles-compile-3"
          linkends="coDef-profiles-compile-3" />
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
              &lt;debug&gt;false&lt;/debug&gt;<co
          id="coDef-profiles-compile-4" linkends="coDef-profiles-compile-4" />
              &lt;optimize&gt;true&lt;/optimize&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>本例中，我们添加了一个名为<literal>production</literal>的profile，它覆盖了Maven
    Compiler插件的默认配置，现在仔细看一下这个profile的语法。</para>

    <calloutlist>
      <callout arearefs="coDef-profiles-compile-1"
               id="coRef-profiles-compile-1">
        <para><filename>pom.xml</filename>中的<sgmltag>profiles</sgmltag>元素，它包含了一个或者多个<sgmltag>profile</sgmltag>元素。由于profile覆盖了<filename>pom.xml</filename>中的默认设置，<sgmltag>profiles</sgmltag>通常是<filename>pom.xml</filename>中的最后一个元素。</para>
      </callout>

      <callout arearefs="coDef-profiles-compile-2"
               id="coRef-profiles-compile-2">
        <para>每个profile必须要有一个<sgmltag>id</sgmltag>元素。这个<sgmltag>id</sgmltag>元素包含的名字将在命令行调用profile时被用到。我们可以通过传给Maven一个<command>-P&lt;profile_id&gt;</command>参数来调用profile。</para>
      </callout>

      <callout arearefs="coDef-profiles-compile-3"
               id="coRef-profiles-compile-3">
        <para>一个<sgmltag>profile</sgmltag>元素可以包含很多其它元素，只要这些元素可以出现在POM
        XML文档的<sgmltag>project</sgmltag>元素下面。本例中，我们覆盖了Compiler插件的行为，因此必须覆盖插件配置，该配置通常包含在一个<sgmltag>build</sgmltag>和一个<sgmltag>plugins</sgmltag>元素下面。</para>
      </callout>

      <callout arearefs="coDef-profiles-compile-4"
               id="coRef-profiles-compile-4">
        <para>我们覆盖了Maven Compiler插件的配置。确保通过production
        profile产生的字节码不会包含调试信息，并且字节码会被编译器优化。</para>
      </callout>
    </calloutlist>

    <para>要使用<literal>production</literal> profile运行<command>mvn
    install</command>，你需要在命令行传入<command>-Pproduction</command>参数。要验证<literal>production</literal>
    profile覆盖了默认的Compiler插件配置，可以像这样以开启调试输出(<command>-X</command>)
    的方式运行Maven。</para>

    <screen>~/examples/profile $ <command>mvn clean install -Pproduction -X</command>
... (omitting debugging output) ...
[DEBUG] Configuring mojo 'o.a.m.plugins:maven-compiler-plugin:2.0.2:testCompile'
[DEBUG]   (f) basedir = ~\examples\profile
[DEBUG]   (f) buildDirectory = ~\examples\profile\target
...
[DEBUG]   (f) compilerId = javac
[DEBUG]   (f) <emphasis>debug = false</emphasis>
[DEBUG]   (f) failOnError = true
[DEBUG]   (f) fork = false
[DEBUG]   (f) <emphasis>optimize = true</emphasis>
[DEBUG]   (f) outputDirectory = \
          ~\svnw\sonatype\examples\profile\target\test-classes
[DEBUG]   (f) outputFileName = simple-1.0-SNAPSHOT
[DEBUG]   (f) showDeprecation = false
[DEBUG]   (f) showWarnings = false
[DEBUG]   (f) staleMillis = 0
[DEBUG]   (f) verbose = false
[DEBUG] -- end configuration --
... (omitting debugging output) ...
</screen>

    <para>Maven的调试输出体现了production
    profile下Compiler插件的配置。可以看到，<varname>debug</varname>被设置成false，<varname>optimize</varname>设置成true。</para>

    <section>
      <title>覆盖一个项目对象模型</title>

      <para>虽然前面的样例展示了如何覆盖一个Maven插件的默认配置属性，你仍然没有确切知道Maven
      profile能覆盖什么。简单的回答这个问题，Maven
      profile可以覆盖几乎所有<filename>pom.xml</filename>中的配置。Maven
      <acronym>POM</acronym>包含一个名为<sgmltag>profiles</sgmltag>的元素，它包含了项目的替代配置，在这个元素下面，每个<sgmltag>profile</sgmltag>元素定义了一个单独的profile。每个profile必须要有一个<sgmltag>id</sgmltag>，除此之外，它可以包含几乎所有你能在project下看到的元素。以下的<acronym>XML</acronym>文档展示了一个profile允许覆盖的所有的元素。</para>

      <para><example>
          <title>Profile中允许出现的元素</title>

          <programlisting language="xml">&lt;project&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;build&gt;
        &lt;defaultGoal&gt;...&lt;/defaultGoal&gt;
        &lt;finalName&gt;...&lt;/finalName&gt;
        &lt;resources&gt;...&lt;/resources&gt;
        &lt;testResources&gt;...&lt;/testResources&gt;
        &lt;plugins&gt;...&lt;/plugins&gt;
      &lt;/build&gt;
      &lt;reporting&gt;...&lt;/reporting&gt;
      &lt;modules&gt;...&lt;/modules&gt;
      &lt;dependencies&gt;...&lt;/dependencies&gt;
      &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;
      &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;
      &lt;repositories&gt;...&lt;/repositories&gt;
      &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;
      &lt;properties&gt;...&lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>一个Profile可以覆盖项目构件的最终名称，项目依赖，插件配置以影响构建行为。Profile还可以覆盖分发配置；例如，如果你通过一个staging
      profile发布一个构件到staging服务器上，你就可以创建一个profile然后在里面定义<sgmltag>distributionManagement</sgmltag>元素。</para>
    </section>
  </section>

  <section>
    <title>激活Profile</title>

    <para>在之前的小节中我们介绍了如何为一个特定的目标环境创建一个profile以覆盖默认行为。前面的例子中默认的构建是针对开发环境设计的，而<literal>production</literal>
    profile的存在就是为了为产品环境提供配置。当你需要基于一些变量如操作系统和<acronym>JDK</acronym>版本来进行配置的时候怎么做呢？Maven提供了一种针对不同环境参数“激活”一个profile的方式，这就叫做profile激活。</para>

    <para>看如下的例子，假设我们拥有一个Java类库，它有一个特定的功能只有在Java 6下才可用，它需要使用定义在<ulink
    url="http://jcp.org/en/jsr/detail?id=223">JSR-223</ulink>中的脚本引擎。你已经将那部分处理脚本的类库分离到了一个单独的Maven模块中，并且希望运行Java
    5的人们能构建整个项目，而不去构建那部分针对Java 6的扩展类库。你可以使用一个Maven profile，只有构建在Java 6
    <acronym>JDK</acronym>上运行的时候才将脚本扩展模块添加到构建中。首先，让我们看一下这个项目的目录布局，以及我们希望开发者如何构建该系统。</para>

    <para>当有人使用Java 6 JDK<acronym>JDK</acronym><command>mvn
    install</command>的时候，你希望构建包含<literal>simple-script</literal>模块，而它们使用Java
    5的时候，你希望跳过<literal>simple-script</literal>模块的构建。假如在Java
    5下不能够跳过<literal>simple-script</literal>模块的构建，构建会失败因为Java
    5的classpath中没有<classname>ScriptEngine</classname>。让我们看一下该类库项目的<filename>pom.xml</filename>：</para>

    <example>
      <title>使用Profile激活动态包含子模块</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
  &lt;artifactId&gt;simple&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;simple&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;jdk16&lt;/id&gt;
      &lt;activation&gt;<co id="coDef-profiles-active-1"
          linkends="coRef-profiles-active-1" />
        &lt;jdk&gt;1.6&lt;/jdk&gt;
      &lt;/activation&gt;
      &lt;modules&gt;<co id="coDef-profiles-active-2" lang=""
          linkends="coRef-profiles-active-2" />
        &lt;module&gt;simple-script&lt;/module&gt;
      &lt;/modules&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>如果你在Java 1.6下运行<command>mvn
    install</command>，你会看到Maven下行到<filename>simple-script</filename>子目录构建<literal>simple-script</literal>项目。如果你在Java
    1.5上运行<command>mvn
    install</command>，Maven就不会去构建<literal>simple-script</literal>子模块。让我们详细看一下激活配置：</para>

    <calloutlist>
      <callout arearefs="coDef-profiles-active-1" id="coRef-profiles-active-1">
        <para><sgmltag>activation</sgmltag>元素列出了所有激活profile需要的条件。该例中，我们的配置为，当Java版本以“1.6”开头的时候profile会被激活。这包括“1.6.0_03”，“1.6.0_02”以及所有其它以“1.6”开头的字符串。激活参数不局限于Java版本，要了解激活参数的完整列表，请看<xref
        linkend="profile-activation-config"
        xrefstyle="select:title" />。</para>
      </callout>

      <callout arch="" arearefs="coDef-profiles-active-2"
               id="coRef-profiles-active-2">
        <para>在这个profile中我们添加了模块<literal>simple-script</literal>。这么做会让Maven从<filename>simple-script/</filename>子目录中寻找一个<filename>pom.xml</filename>文件。</para>
      </callout>
    </calloutlist>

    <section id="profile-activation-config">
      <title>激活配置</title>

      <para>激活配置元素下可以包含一个或者多个选择器：包含JDK版本，操作系统参数，文件，以及属性。当所有标准都被满足的时候一个profile才会被激活。例如，一个profile可以要求操作系统家族为Windoes，JDK版本为1.4，那么该profile只有当构建在Windows机器上的Java
      1.4上运行的时候才会被激活。如果该profile被激活，那么它定义的所有配置都会覆盖原来POM中对应层次的元素，就像使用命令行参数<command>-P</command>引入该profile一样。下面的例子展示了一个profile，它通过一个十分复杂的配置组合激活，包括操作系统参数，属性，以及JDK版本。</para>

      <para><example>
          <title>Profile激活参数：JDK版本，操作系统参数，以及属性</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;dev&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;<co
              id="coDef-profiles-active2-1"
              linkends="coRef-profiles-active2-1" />
        &lt;jdk&gt;1.5&lt;/jdk&gt;<co id="coDef-profiles-active2-2"
              linkends="coRef-profiles-active2-2" />
        &lt;os&gt;
          &lt;name&gt;Windows XP&lt;/name&gt;<co id="coDef-profiles-active2-3"
              linkends="coRef-profiles-active2-3" />
          &lt;family&gt;Windows&lt;/family&gt;
          &lt;arch&gt;x86&lt;/arch&gt;
          &lt;version&gt;5.1.2600&lt;/version&gt;
        &lt;/os&gt;
        &lt;property&gt;
          &lt;name&gt;mavenVersion&lt;/name&gt;<co
              id="coDef-profiles-active2-4"
              linkends="coRef-profiles-active2-4" />
          &lt;value&gt;2.0.5&lt;/value&gt;
        &lt;/property&gt;
        &lt;file&gt;
          &lt;exists&gt;file2.properties&lt;/exists&gt;<co
              id="coDef-profiles-active2-5"
              linkends="coRef-profiles-active2-5" />
          &lt;missing&gt;file1.properties&lt;/missing&gt;
        &lt;/file&gt;
      &lt;/activation&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>上例定义了一组狭小的激活参数集合。让我们仔细看一下每个激活配置：</para>

      <calloutlist>
        <callout arearefs="coDef-profiles-active2-1"
                 id="coRef-profiles-active2-1">
          <para><sgmltag>activeByDefault</sgmltag>元素控制一个profile是否默认被激活。</para>
        </callout>

        <callout arearefs="coDef-profiles-active2-2"
                 id="coRef-profiles-active2-2">
          <para>该profile只有当JDK版本以“1.5”开头的时候才被激活。这包含“1.5.0_01”，“”1.5.1。</para>
        </callout>

        <callout arearefs="coDef-profiles-active2-3"
                 id="coRef-profiles-active2-3">
          <para>该profile针对与一个十分确切的Windowx
          XP版本，32位平台上的5.1.2600版本。如果你的项目使用本地插件来构建一个C程序，你可能会发现自己正为特定的平台编写项目。</para>
        </callout>

        <callout arearefs="coDef-profiles-active2-4"
                 id="coRef-profiles-active2-4">
          <para><sgmltag>property</sgmltag>元素告诉Maven，当<varname>mavenVersion</varname>属性的值被设置成<literal>2.0.5</literal>的时候才激活profile。<varname>mavenVersion</varname>是一个在所有Maven构建中可用的隐式属性。</para>
        </callout>

        <callout arearefs="coDef-profiles-active2-5"
                 id="coRef-profiles-active2-5">
          <para><sgmltag>file</sgmltag>元素告诉我们只有当某些文件存在（或者不存在）的时候才激活profile。该例中的<literal>dev</literal>
          profile只有在项目基础目录中存在<filename>file2.properties</filename>文件，并且不存在<filename>file1.properties</filename>文件的时候才被激活。</para>
        </callout>
      </calloutlist>
    </section>

    <section>
      <title>通过属性缺失激活</title>

      <para>你可以基于一个属性如<varname>environment.type</varname>的值来激活一个profile。当<varname>environment.type</varname>等于<literal>dev</literal>的时候激活<literal>development</literal>
      profile，或者当<varname>environment.type</varname>等于<literal>prod</literal>的时候激活<literal>production</literal>
      profile。你也可以通过一个属性的缺失来激活一个profile。下面的配置中，只有在Maven运行过程中属性<varname>environment.type</varname>不存在profile才被激活。</para>

      <para><example>
          <title>在属性缺失的情况下激活Profile</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;development&lt;/id&gt;
      &lt;activation&gt;
        &lt;property&gt;
          &lt;name&gt;!environment.type&lt;/name&gt;
        &lt;/property&gt;
      &lt;/activation&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>注意属性名称前面的惊叹号。惊叹号通常表示“否定”的意思。当没有设置<varname>${environment.type}</varname>属性的时候，这个profile被激活。</para>
    </section>
  </section>

  <section>
    <title>外部Profile</title>

    <para>如果你开始大量使用Maven
    profile，你会希望将profile从POM中分离，使用一个单独的文件如<filename>profiles.xml</filename>。你可以混合使用定义在<filename>pom.xml</filename>中和外部<filename>profiles.xml</filename>文件中的profile。只需要将<sgmltag>profiles</sgmltag>元素放到<varname>${basedir}</varname>目录下的<filename>profiles.xml</filename>文件中，然后照常运行Maven就可以。<filename>profiles.xml</filename>文件的大概内容如下：</para>

    <example>
      <title>将profile放到一个profiles.xml文件中</title>

      <programlisting language="xml"> &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;development&lt;/id&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
              &lt;debug&gt;true&lt;/debug&gt;
              &lt;optimize&gt;false&lt;/optimize&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
      &lt;id&gt;production&lt;/id&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
              &lt;debug&gt;false&lt;/debug&gt;
              &lt;optimize&gt;true&lt;/optimize&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;</programlisting>
    </example>

    <para>你可以发现你的Profile增长得过大了，而让你管理<filename>pom.xml</filename>变得很困难，或者说只是因为你觉得将<filename><filename>profiles.xml</filename></filename>文件从中<filename>pom.xml</filename>分离出来是一种更干净的方式。不管怎样，调用定义在<filename>pom.xml</filename>中的profile和调用定义在<filename>profiles.xml</filename>中profile的方式是一样的。</para>
  </section>

  <section>
    <title>Settings Profile</title>

    <para>当一个项目需要为特定的环境自定义构建设置的时候，profile很有用，但是为什么一定要为所有Maven项目覆盖构建设置呢？比如为每个Maven构建添加一个需要访问的内部仓库。你可以使用一个settings
    profile做这件事情。项目profile关心于覆盖某个项目的配置，而settings
    profile可以应用到所有你使用Maven构建的项目。你可以在两个地方定义settings
    profile：定义在<filename>~/.m2/settings.xml</filename>中的用户特定settings
    profile，或者定义在<filename>${M2_HOME}/conf/settings.xml</filename>中的全局settings
    profile。这里是一个定义在<filename>~/.m2/settings.xml</filename>中的settings
    profile的例子，它为所有的构建设置了一些用户特定的配置属性。如下<filename>settings.xml</filename>文件为用户<literal>tobrien</literal>定义：</para>

    <example>
      <title>定义用户特定的Setting Profile (~/.m2/settings.xml)</title>

      <programlisting language="xml">&lt;settings&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;dev&lt;/id&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
           &lt;execution&gt;
              &lt;goals&gt;
                 &lt;goal&gt;sign&lt;/goal&gt;
              &lt;/goals&gt;
           &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;configuration&gt;
           &lt;keystore&gt;/home/tobrien/java/keystore&lt;/keystore&gt;
           &lt;alias&gt;tobrien&lt;/alias&gt;
           &lt;storepass&gt;s3cr3tp@ssw0rd&lt;/storepass&gt;
           &lt;signedjar&gt;
         ${project.build.directory}/signed/${project.build.finalName}.jar
           &lt;/signedjar&gt;
           &lt;verify&gt;true&lt;/verify&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/settings&gt;</programlisting>
    </example>

    <para>前面的例子是一个对于用户特定settings
    profile的真实用例。该样例中，当发布时为一个JAR文件签名的时候，设置用户特定的信息如密码和别名。你不会希望将这些配置参数存储到项目共享的<filename>pom.xml</filename>或者<filename>profiles.xml</filename>文件中，因为它们包含了一些不应该被公开的私人信息。</para>

    <para>settings
    profile的缺点是它们可能会干扰项目可移植性。如果前面的例子是一个开源项目，如果一个新的开发者没有和其它开发者交流过并手工配置一个settings
    profile，他将不能够为一个JAR签名。这样的情况下，为JAR签名的安全需求就与全局可移植性构建产生了冲突。在最开源的项目中，有一些任务需要安全证书：将一个构件发布到远程仓库，发布项目的web站点，或者为JAR文件签名。对于这些任务，可以达到的最高级别可移植性只能是组织可移植性。这些高安全性任务通常需要一些手工的profile安装和配置。</para>

    <para>除了显式的使用<command>-P</command>命令行参数指定profile的名称。你还可以为所有构建的项目定义一个激活profile的列表。例如，如果你想要为每个项目激活定义在<filename>settings.xml</filename>中的<literal>dev</literal>
    profile，你可以在你的<filename>~/.m2/settings.xml</filename>文件中添加如下的设置：</para>

    <para><example>
        <title>定义激活的Settings Profile</title>

        <programlisting language="xml">&lt;settings&gt;
  ...
  &lt;activeProfiles&gt;
    &lt;activeProfile&gt;dev&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
      </example></para>

    <para>该设置指挥激活settings
    profile，不会激活id匹配的项目profile。例如，如果你有一个项目，在<filename>pom.xml</filename>中定义了一个<sgmltag>id</sgmltag>为<literal>dev</literal>的profile，那个profile不会受你<filename>settings.xml</filename>中<sgmltag>activeProfile</sgmltag>设置的影响。<sgmltag>activeProfile</sgmltag>设置只对你<filename>settings.xml</filename>文件中定义的profile有效。</para>

    <section>
      <title>全局Settings Profile</title>

      <para>如同用户特定的settings
      profile一样，你也可以在<filename>${M2_HOME}/conf/settings.xml</filename>中定义一组全局profile。在这个配置文件中定义的profile对所有使用该Maven安装的用户可用。如果你正为一个特定的组织创建一个定制的Maven分发包，并且你想要确保每个Maven用户使用一组构建profile以确保内部可移植性，定义全局settings
      profile就十分有用。如果你需要添加自定义插件仓库，或者定义一组只在你组织内部可用的自定义插件，你就可以为你的用户分发一个内置了这些配置的Maven。配置全局settings
      profile和配置用户特定的settings profile完全一样。</para>
    </section>
  </section>

  <section>
    <title>列出活动的Profile</title>

    <para>Maven
    profile可以通过<filename>pom.xml</filename>，<filename>profiles.xml</filename>，<filename>~/.m2/settings.xml</filename>，或者<filename>${M2_HOME}/conf/settings.xml</filename>定义。由于有四个层次，除了记住哪个文件中定义了哪个profile，没什么好的方式了解某个特定项目可用的profile。为了更方便的了解某个项目可用的profile，以及它们是在哪里定义的，Maven
    Help插件定义了一个目标，<literal>active-profiles</literal>，它能列出所有激活的profile，以及它们在哪里定义。你可以如下运行<literal>active-profiles</literal>目标：</para>

    <screen>$ <command>mvn help:active-profiles</command>
Active Profiles for Project 'My Project':

The following profiles are active:

 - my-settings-profile (source: settings.xml)
 - my-external-profile (source: profiles.xml)
 - my-internal-profile (source: pom.xml)</screen>
  </section>

  <section>
    <title>提示和技巧</title>

    <para>Profile可以用来鼓励构建可移植性。如果你的构建需要为不同的平台做一些细微的自定义，或者如果你针对不同的目标平台生成不同的输出，项目profile就能增加构建可移植性。Settings
    profile通常会降低构建可移植性，因为它会添加一些必须在开发人员之间沟通的额外项目信息。下面的小节提供了一些如何在你项目中使用Maven
    profile的指导意见和想法。</para>

    <section>
      <title>常见的环境</title>

      <para>One of the core motivations for Maven project profiles was to
      provide for environment-specific configuration settings. In a
      development environment, you might want to produce bytecode with debug
      information and you might want to configure your system to use a
      development database instance. In a production environment you might
      want to produce a signed JAR and configure the system to use a
      production database. In this chapter, we defined a number of
      environments with identifiers like <literal>dev</literal> and
      <literal>prod</literal>. A simpler way to do this would be to define
      profiles that are activated by environment properties and to use these
      common environment properties across all of your projects. For example,
      if every project had a <literal>development</literal> profile activated
      by a property named <varname>environment.type</varname> having a value
      of <literal>dev</literal>, and if those same projects had a
      <literal>production</literal> profile activated by a property named
      <varname>environment.type</varname> having a value of
      <literal>prod</literal>, you could create a default profile in your
      <filename>settings.xml</filename> that always set
      <varname>environment.type</varname> to <literal>dev</literal> on your
      development machine. This way, each project defines a
      <literal>dev</literal> profile activated by the same environment
      variable. Let's see how this is done, the following
      <filename>settings.xml</filename> defines a profile in
      <filename>~/.m2/settings.xml</filename> which sets the
      <varname>environment.type</varname> property to
      <literal>dev</literal>.</para>

      <para><example>
          <title>~/.m2/settings.xml defines a default profile setting
          environment.type</title>

          <programlisting language="xml">&lt;settings&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;environment.type&gt;dev&lt;/environment.type&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>This means that every time you run Maven on your machine, this
      profile will be activated and the property
      <varname>environment.type</varname> will have the value
      <literal>dev</literal>. You can then use this property to activate
      profiles defined in a project's <filename>pom.xml</filename> as follows.
      Let's take a look at how a project's <filename>pom.xml</filename> would
      define a profile activated by <varname>environment.type</varname> having
      the value <literal>dev</literal>.</para>

      <para><example id="ex-profile-envtype-pom">
          <title>Project Profile Activated by environment.type equalling
          'dev'</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;development&lt;/id&gt;
      &lt;activation&gt;
        &lt;property&gt;
          &lt;name&gt;environment.type&lt;/name&gt;
          &lt;value&gt;dev&lt;/value&gt;
        &lt;/property&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;database.driverClassName&gt;com.mysql.jdbc.Driver&lt;/database.driverClassName&gt;
        &lt;database.url&gt;
          jdbc:mysql://localhost:3306/app_dev
        &lt;/database.url&gt;
        &lt;database.user&gt;development_user&lt;/database.user&gt;
        &lt;database.password&gt;development_password&lt;/database.password&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
      &lt;id&gt;production&lt;/id&gt;
      &lt;activation&gt;
        &lt;property&gt;
          &lt;name&gt;environment.type&lt;/name&gt;
          &lt;value&gt;prod&lt;/value&gt;
        &lt;/property&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;database.driverClassName&gt;com.mysql.jdbc.Driver&lt;/database.driverClassName&gt;
        &lt;database.url&gt;jdbc:mysql://master01:3306,slave01:3306/app_prod&lt;/database.url&gt;
        &lt;database.user&gt;prod_user&lt;/database.user&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>This project defines some properties like
      <varname>database.url</varname> and <varname>database.user</varname>
      which might be used to configure another Maven plugin configured in the
      <filename>pom.xml</filename>. There are plugins available that can
      manipulate the database, run SQL, and plugins like the Maven Hibernate3
      plugin which can generate annotated model objects for use in persistence
      frameworks. A few of these plugins, can be configured in a
      <filename>pom.xml</filename> using these properties. These properties
      could also be used to filter resources. In this example, because we've
      defined a profile in <filename>~/.m2/settings.xml</filename> which sets
      <varname>environment.type</varname> to <literal>dev</literal>, the
      development profile will always be activated when we run Maven on our
      development machine. Alternatively, if we wanted to override this
      default, we could set a property on the command-line. If we need to
      activate the production profile, we could always run Maven with:</para>

      <screen>~/examples/profiles $ <command>mvn install -Denvironment.type=prod</command></screen>

      <para>Setting a property on the command-line would override the default
      property set in <filename>~/.m2/settings.xml</filename>. We could have
      just defined a profile with an <sgmltag>id</sgmltag> of "dev" and
      invoked it directly with the <command>-P</command> command-line
      argument, but using this <varname>environment.type</varname> property
      allows us to code other project <filename>pom.xml</filename> files to
      this standard. Every project in your codebase could have a profile which
      is activated by the same <varname>environment.type</varname> property
      set in every user's <filename>~/.m2/settings.xml</filename>. In this
      way, developers can share common configuration for development without
      defining this configuration in non-portable
      <filename>settings.xml</filename> files.</para>
    </section>

    <section>
      <title>保护机密</title>

      <para>This best practice builds upon the previous section. In <xref
      linkend="ex-profile-envtype-pom" xrefstyle="select:title" />, the
      production profile does not contain the
      <varname>database.password</varname> property. I've done this on purpose
      to illustrate the concept of putting secrets in you user-specific
      <filename>settings.xml</filename>. If you were developing an application
      at a large organization which values security, it is likely that the
      majority of the development group will not know the password to the
      production database. In an organization that draws a bold line between
      the development group and the operations group, this will be the norm.
      Developers may have access to a development and a staging environment,
      but they might not have (or want to have) access to the production
      database. There are a number of reasons why this makes sense,
      particularly if an organization is dealing with extremely sensitive
      financial, intelligence, or medical information. In this scenario, the
      production environment build may only be carried out by a lead developer
      or by a member of the production operations group. When they run this
      build using the <literal>prod</literal>
      <varname>environment.type</varname>, they will need to define this
      variable in their <filename>settings.xml</filename> as follows:</para>

      <example>
        <title>Storing Secrets in a User-specific Settings Profile</title>

        <programlisting language="xml">&lt;settings&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
      &lt;properties&gt;
        &lt;environment.type&gt;prod&lt;/environment.type&gt;
        &lt;database.password&gt;m1ss10nimp0ss1bl3&lt;/database.password&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/settings&gt;
</programlisting>
      </example>

      <para>This user has defined a default profile which sets the
      <varname>environment.type</varname> to <literal>prod</literal> and which
      also sets the production password. When the project is executed, the
      production profile is activated by the
      <varname>environment.type</varname> property and the
      <varname>database.password</varname> property is populated. This way,
      you can put all of the production-specific configuration into a
      project's <filename>pom.xml</filename> and leave out only the single
      secret necessary to access the production database.</para>

      <note>
        <para>Secrets usually conflict with wide portability, but this makes
        sense. You wouldn't want to share your secrets openly.</para>
      </note>
    </section>

    <section id="sect-platform-classifier">
      <title>平台分类器</title>

      <para>Let's assume that you have a library or a project that produces
      platform-specific customizations. Even though Java is platform-neutral,
      there are times when you might need to write some code that invokes
      platform-specific native code. Another possibility is that you've
      written some C code which is compiled by the Maven Native plugin and you
      want to produce a qualified artifact depending on the build platform.
      You can set a classifier with the Maven Assembly plugin or with the
      Maven Jar plugin. The following <filename>pom.xml</filename> produces a
      qualified artifact using profiles which are activated by Operation
      System parameters. For more information about the Maven Assembly plugin,
      see <xref linkend="assemblies" />.</para>

      <para><example>
          <title>Qualifying Artifacts with Platform Activated Project
          Profiles</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;windows&lt;/id&gt;
      &lt;activation&gt;
        &lt;os&gt;
          &lt;family&gt;windows&lt;/family&gt;
        &lt;/os&gt;
      &lt;/activation&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plugin
            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
              &lt;classifier&gt;win&lt;/classifier&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
      &lt;id&gt;linux&lt;/id&gt;
      &lt;activation&gt;
        &lt;os&gt;
          &lt;family&gt;unix&lt;/family&gt;
        &lt;/os&gt;
      &lt;/activation&gt;
      &lt;build&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
              &lt;classifier&gt;linux&lt;/classifier&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>If the Operating System is in the Windows family, this
      <filename>pom.xml</filename> qualifies the JAR artifact with "-win". If
      the Operating System is in the Unix family, the artifact is qualified
      with "-linux". This <filename>pom.xml</filename> successfully adds the
      qualifiers to the artifacts, but it is more verbose than it need to be
      due to the redundant configuration of the Maven Jar plugin in both
      profiles. This example could be rewritten to use variable substitution
      to minimize redundancy as follows:</para>

      <para><example>
          <title>Qualifying Artifacts with Platform Activated Project Profiles
          and Variable Substitution</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;classifier&gt;${envClassifier}&lt;/classifier&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;windows&lt;/id&gt;
      &lt;activation&gt;
        &lt;os&gt;
          &lt;family&gt;windows&lt;/family&gt;
        &lt;/os&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;envClassifier&gt;win&lt;/envClassifier&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
      &lt;id&gt;linux&lt;/id&gt;
      &lt;activation&gt;
        &lt;os&gt;
          &lt;family&gt;unix&lt;/family&gt;
        &lt;/os&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;envClassifier&gt;linux&lt;/envClassifier&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>In this <filename>pom.xml</filename>, each profile doesn't need to
      include a <sgmltag>build</sgmltag> element to configure the Jar plugin.
      Instead, each profile is activated by the Operating System family and
      sets the <varname>envClassifier</varname> property to either
      <literal>win</literal> or <literal>linux</literal>. This
      <varname>envClassifier</varname> is then referenced in the default
      <filename>pom.xml</filename> <sgmltag>build</sgmltag> element to add a
      classifier to the project's JAR artifact. The JAR artifact will be named
      <code>${finalName}-${envClassifier}.jar</code> and included as a
      dependency using the following dependency syntax:</para>

      <para><example>
          <title>Depending on a Qualified Artifact</title>

          <programlisting language="xml">&lt;dependency&gt;
      &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
      &lt;artifactId&gt;my-project&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;classifier&gt;linux&lt;/classifier&gt;
    &lt;/dependency&gt;
</programlisting>
        </example></para>
    </section>
  </section>

  <section>
    <title>小结</title>

    <para>When used judiciously, profiles can make it very easy to customize a
    build for different platforms. If something in your build needs to define
    a platform-specific path for something like an application server, you can
    put these configuration points in a profile which is activated by an
    operating system parameter. If you have a project which needs to produce
    different artifacts for different environments, you can customize the
    build behavior for different environments and platforms via
    profile-specific plugin behavior. Using profiles, builds can become
    portable, there is no need to rewrite your build logic to support a new
    environment, just override the configuration that needs to change and
    share the configuration points which can be shared.</para>
  </section>
</chapter>
