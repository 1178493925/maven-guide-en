<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="optimizing">
  <title>Optimizing and Refactoring POMs</title>

  <section id="multimodule-web-optimizing-intro">
    <title>Introduction</title>

    <para>In <xref linkend="multimodule-web-spring" />, we showed how many
    pieces of Maven come together to produce a fully functional multi-module
    build. While the example from that chapter suggests a real application -
    one which interacts with a database, a web service, and which, itself,
    presents two interfaces: one in a web application, and one on the
    command-line; the example project presented in that chapter is still
    contrived. To present the complexity of a real project would require a
    book far larger than the one you are now reading. Real life applications
    evolve over years and are often maintained by large diverse groups of
    developers each with a different focus. In a real world project, you are
    often evaluating decisions and designs made and created by others. In this
    chapter, we take a step back from the examples you've seen in <xref
    linkend="part-example" />, and we ask ourselves if there are any
    optimizations that might make more sense given what we now know of Maven.
    Maven is a very capable and tool which can be as simple or as complex as
    you need it to be. Because of this, there are often a million ways to
    accomplish the same task, and there is often no one, "right" way to
    configure your Maven project.</para>

    <para>Don't misinterpret that last sentence as a license to go off and ask
    Maven to do something it wasn't designed for. While Maven allows for a
    diversity of approach, there is certainly "A Maven Way", and you'll be
    more productive using Maven as it was designed to be used. All this
    chapter is trying to do is communicate some of the optimizations you can
    perform on an existing Maven project. Why didn't we just introduce an
    optimized <acronym>POM</acronym> in the first place? Designing
    <acronym>POM</acronym>s for pedagogy is a very different requirement from
    designing <acronym>POM</acronym>s for efficiency. While it is certainly
    much easier to define a certain setting in your
    <filename>~/.m2/settings.xml</filename> than to declare a profile in a
    <filename>pom.xml</filename>, writing a book, and reading a book is mostly
    about pacing and making sure we're not introducing concepts before you are
    ready. In <xref linkend="part-example" />, we've made an effort not to
    overwhelm the reader with too much information, and, in doing so, we've
    skipped some core concepts like the
    <sgmltag>dependencyManagement</sgmltag> element introduced in this
    chapter.</para>

    <para>There are often instances in <xref linkend="part-example" /> when
    the authors of this book took a short-cut or glossed over an important
    detail to shuffle you along to the main point of a specific chapter. You
    learned how to create a Maven project and you compiled and installed it
    without having to wade through hundreds of pages introducing every last
    switch and dial available to you. We've done this because we believe it is
    important to deliver the new Maven user to a result faster rather than
    meandering our way through a very long, seemingly interminable story. Once
    you've started to use Maven, you should know how to analyze your own
    projects and <acronym>POM</acronym>s. In this chapter, we take a step
    back, and take a look at what we're left with after the example from <xref
    linkend="multimodule-web-spring" />.</para>
  </section>

  <section>
    <title>POM Cleanup</title>

    <para>Optimizing a Multi-Module project’s <acronym>POM</acronym> is best
    done in several passes as there are many areas to focus on. In general, we
    are looking for repetition within a <acronym>POM</acronym> and across the
    sibling <acronym>POM</acronym>s. When you are starting out, or when a
    project is still evolving very rapidly, it is acceptable to duplicate some
    dependencies and plugin configurations here and there, but as the project
    matures and as the number of modules increases, you will want to take some
    time to refactor common dependencies and configuration points. Making your
    <acronym>POM</acronym>s more efficient will go a long way to helping you
    manage complexity as your project grows. Whenever there is duplication of
    some piece of information, there is usually a better way.</para>
  </section>

  <section>
    <title>Optimizing Dependencies</title>

    <para>If you take a look through the various <acronym>POM</acronym>s
    created in <xref linkend="multimodule-web-spring" />, note several
    patterns of replication. The first pattern we can see is that some
    dependencies such as <varname>spring</varname> and
    <varname>hibernate-annotations</varname> are declared in several modules.
    The hibernate dependency also has the exclusion on
    <package>javax.transaction</package> replicated in each definition. The
    second pattern of duplication to note is that sometimes several
    dependencies are related and share the same version. This is often the
    case when a project's release consists of several closely coupled
    component. For example, look at the dependencies on
    <varname>hibernate-annotations</varname> and
    <varname>hibernate-commons-annotations</varname>, both are listed as
    version <varname>3.3.0.ga</varname>, and we can expect the version of both
    these dependencies to change together going forward. Both the
    <varname>hibernate-annotations</varname> and
    <varname>hibernate-commons-annotations</varname> are components of the
    same project released by JBoss, when there is a new project release, both
    of these dependencies will change. The last pattern of duplication is the
    duplication of sibling module dependencies and sibling module versions.
    Maven provides simple mechanisms that let you factor all of this
    duplication into a parent <acronym>POM</acronym>.</para>

    <para>Just like in your project's source code, any time you have
    duplication in your <acronym>POM</acronym>s, you open the door a bit for
    trouble down the road. Duplicated dependency declarations make it
    difficult to ensure consistent versions across a large project. When
    you've only got two or three modules, this might not be a primary issue,
    but when your organization is using a large, multi-module Maven build to
    manage hundreds of components across multiple departments, one single
    mismatch between dependencies can cause chaos and confusion. A simple
    version mismatch in a project's dependency on a bytecode manipulation
    package called <acronym>ASM</acronym> three levels deep in the project
    hierarchy could throw a wrench into a web application maintained by a
    completely different group of developers which depend on that particular
    module. Unit tests could pass because they are being run with one version
    of a dependency, but they could fail disastrously in production where the
    bundle (war in this case) was packaged up with a different version. If you
    have tens of projects using something like Hibernate Annotations each
    repeating and duplicating the dependencies and exclusions, the mean time
    between someone screwing up a build is going to be very short. As your
    Maven projects become more complex, your dependency lists are going to
    grow, and you are going to want to consolidate versions and dependency
    declarations in parent <acronym>POM</acronym>s.</para>

    <para>The duplication of the sibling module versions can introduce a
    particularly nasty problem that is not directly caused by Maven and is
    only learned after you've been bitten by this bug a few times. If you use
    the Maven Release plugin to perform your releases, all these sibling
    dependency versions will be updated automatically for you, so maintaining
    them is not the concern. If <varname>simple-web</varname> version
    <varname>1.3-SNAPSHOT</varname> depends on
    <varname>simple-persist</varname> version <varname>1.3-SNAPSHOT</varname>,
    and you are performing a release of the <varname>1.3</varname> version of
    both projects, the Maven Release plugin is smart enough to change the
    versions throughout your multi-module project's <acronym>POM</acronym>s
    automatically. Running the release with the Release plugin will
    automatically increment all of the version in your build to
    <varname>1.4-SNAPSHOT</varname>, and the release plugin will commit the
    code change to the repository. Releasing a huge multi-module project
    couldn't be more easy, until...</para>

    <para>Problems occur when developers merge changes to the
    <acronym>POM</acronym> and interferes with a release which is in progress.
    Often a developer merges and occasionally mishandles the conflict on the
    sibling dependency, inadvertently reverting that version to a previous
    release. Since the consecutive versions of the dependency are often
    compatible, it does not show up when the developer builds and won’t show
    up in any continuous integration build system as a failed build. Imagine a
    very complex build where the trunk is full of components at
    <varname>1.4-SNAPSHOT</varname>, and now imagine that developer A has
    updated a component A deep within the project's hierarchy to depend on
    version <varname>1.3-SNAPSHOT</varname> of component B. Even though most
    developers are going to have <varname>1.4-SNAPSHOT</varname>, the build is
    going to succeed if version <varname>1.3-SNAPSHOT</varname> and
    <varname>1.4-SNAPSHOT</varname> of component B are compatible. Maven will
    continue to build the project using the <varname>1.3-SNAPSHOT</varname>
    version of component B from developer's local repositories. Everything
    seems to be going quite smoothly, the project builds, the continuous
    integration build works fine, someone might have had a mystifying bug
    related to component B, but they marked it up to malevolent gremlins and
    moved on. Meanwhile, there is a pump in the reactor room steadily building
    up pressure until something blows...</para>

    <para>Someone, let's call them Mr. Inadvertent, had a merge conflict in
    component A, and mistakenly pegged component A's dependency on component B
    to <varname>1.3-SNAPSHOT</varname> while the rest of the project marches
    on. A bunch of developers have been trying to fix a bug in component B all
    this time and they've been mystified as to why they can't seem to fix the
    bug in production. Eventually someone looks at component A and realizes
    that the dependency is pointing to the wrong version. Hopefully, the bug
    wasn't large enough to cost money or lives, but Mr. Inadvertent feels
    stupid and people tend to trust him a little less than they did before the
    whole sibling dependency screw-up. (Hopefully, Mr. Inadvertent realizes
    that this was user error and not Maven's fault, but more than likely he
    starts an awful blog and complains about Maven endlessly to make himself
    feel better.)</para>

    <para>Fortunately, dependency duplication and sibling dependency mismatch
    are easily preventable if you make some small changes. The first thing
    we’re going to do is find all the dependencies used in more than one
    project and move them up to the parent <acronym>POM</acronym>’s
    <sgmltag>dependencyManagement</sgmltag> section. We’ll leave out the
    sibling dependencies for now. The <varname>simple-parent</varname> pom now
    contains the following:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>Once these are moved up, we need to remove the versions for these
    dependencies from each of the <acronym>POM</acronym>s, otherwise they will
    override the <sgmltag>dependencyManagement</sgmltag> defined in the parent
    project. I will only show <varname>simple-model</varname> for
    brevity:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>The next thing we should do is fix the replication of the
    <varname>hibernate-annotations</varname> and
    <varname>hibernate-commons-annotations</varname> version since these
    should match. We’ll do this by creating a property called
    <varname>hibernate-annotations-version</varname>. The resulting
    <varname>simple-parent</varname> section looks like this:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
  &lt;/properties&gt;

  &lt;dependencyManagement&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
      &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
      &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencyManagement&gt;
  ...
&lt;/project</programlisting>

    <para>The last issue we have to resolve is with the sibling dependencies.
    One technique we could use is to also move these up to the
    <sgmltag>dependencyManagement</sgmltag> section just like all the others
    and define the versions of sibling projects in the top-level parent
    project. This is certainly a valid approach but we can also solve the
    version problem just by using two built-in
    properties-<varname>${project.groupId}</varname> and
    <varname>${project.version}</varname>. Since they are sibling
    dependencies, there is not much value to be gained by enumerating them in
    the parent, so we’ll rely on the built-in
    <varname>${project.version}</varname> property. Since they all share the
    same group, we can further future-proof these declarations by referring to
    the current <acronym>POM</acronym>’s group using the built-in
    <varname>${project.groupId}</varname> property. The
    <varname>simple-command</varname> dependency section now looks like
    this:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>To summarize the two optimizations we completed that reduce
    duplication of dependencies:</para>

    <variablelist>
      <varlistentry>
        <term>Pull-up Common Dependencies to
        <sgmltag>dependencyManagement</sgmltag></term>

        <listitem>
          <para>If more than one project depends on a specific dependency, you
          can list the dependency in <sgmltag>dependencyManagement</sgmltag>.
          The parent <acronym>POM</acronym> can contain a version and a set of
          exclusions, all the child <acronym>POM</acronym> needs to do to
          reference this dependency is use the <varname>groupId </varname>and
          <varname>artifactId</varname>. Child projects can omit the version
          and exclusions if the dependency is listed in
          <sgmltag>dependencyManagement</sgmltag>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Use built-in project version and groupId for sibling
        projects</term>

        <listitem>
          <para>Use $<varname>{project.version}</varname> and
          <varname>${project.groupId}</varname> when referring to a sibling
          project. Sibling projects almost always share the same groupId and
          they almost always share the same release version. Using
          <varname>${project.version}</varname> will help you avoid the
          sibling version mismatch problem discussed above.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Optimizing Plugins</title>

    <para>If we take a look at the various plugin configurations, we can see
    the <acronym>HSQLDB</acronym> dependencies duplicated in several places.
    Unfortunately, <sgmltag>dependencyManagement</sgmltag> doesn’t apply to
    plugin dependencies, but we can still use a property to consolidate the
    versions. Most complex Maven multi-module projects tend to define all
    version in the top-level <acronym>POM</acronym>. This top-level
    <acronym>POM</acronym> then becomes a focal point for changes that affect
    the entire project. Think of version numbers as string literals in a Java
    class, if you are constantly repeating a literal, you'll likely want to
    make it a variable so that when it needs to be change, you only have to
    change it in one place. Rolling up the version of
    <acronym>HSQLDB</acronym> into a property in the top-level
    <acronym>POM</acronym> yields the following properties element:</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>The next thing we notice is that the
    <varname>hibernate3-maven-plugin</varname> configuration is duplicated in
    the <varname>simple-webapp</varname> and <varname>simple-command</varname>
    modules. We can manage the plugin configuration in the top-level
    <acronym>POM</acronym> just like we managed the dependencies in the
    top-level <acronym>POM</acronym> with the
    <sgmltag>dependencyManagement</sgmltag> section. To do this, we use the
    <sgmltag>pluginManagement</sgmltag> element the top-level
    <acronym>POM</acronym>'s build element.</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
  </section>

  <section>
    <title>Optimizing with the Maven Dependency Plugin</title>

    <para>On larger projects, additional dependencies often tend to creep into
    a POM as the number of dependencies grow. As dependencies change, you are
    often left with dependencies which are not being used, and just as often,
    you may forget to declare explicit dependencies for libraries you require.
    Because Maven 2.x includes transitive dependencies in the compile scope,
    your project may compile properly, but fail to run in production. Consider
    a case where a project uses classes from a widely used project like
    Jakarta Commons Beanutils. Instead of declaring an explicit dependency on
    Beanutils, your project simply relies on a project like Hibernate which
    references Beanutils as a transitive dependency. You project may compile
    successfully and run just fine, but if you upgrade to a new version of
    Hibernate which doesn't depend on Beanutils, you'll start to have compile
    and runtime errors, and it won't be immediately obvious why your project
    stopped compiling. Also, because you haven't explicitly listed a
    dependency version, Maven cannot resolve any version conflicts which may
    arise.</para>

    <para>A good rule of thumb in Maven is to always declare explicit
    dependencies for classes referenced in your code. If you are going to be
    importing Commons Beanutils classes, you should also be declaring a direct
    dependency on Commons Beanutils. Fortunately, via bytecode analysis, the
    Maven Dependency Plugin is able to assist you in uncovering direct
    references to dependencies. Using the updated POMs we previously
    optimized, lets look to see if any errors pop up.</para>

    <screen>$ <command>mvn dependency:analyze</command>
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   Chapter 8 Simple Parent Project
[INFO]   Chapter 8 Simple Object Model
[INFO]   Chapter 8 Simple Weather API
[INFO]   Chapter 8 Simple Persistence API
[INFO]   Chapter 8 Simple Command Line Tool
[INFO]   Chapter 8 Simple Web Application
[INFO]   Chapter 8 Parent Project
[INFO] Searching repository for plugin with prefix: 'dependency'.

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    javax.persistence:persistence-api:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[WARNING]    org.hibernate:hibernate:jar:3.2.5.ga:compile
[WARNING]    junit:junit:jar:3.8.1:test

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Web Application
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] No sources to compile
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    org.sonatype.mavenbook.ch08:simple-model:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.apache.velocity:velocity:jar:1.5:compile
[WARNING]    javax.servlet:jstl:jar:1.1.2:compile
[WARNING]    taglibs:standard:jar:1.1.2:compile
[WARNING]    junit:junit:jar:3.8.1:test</screen>

    <para>In the truncated output shown above, you can see the output of the
    <varname>dependency:analyze</varname> goal. This goal analyzes the project
    to see if there are any indirect dependencies, or dependencies which are
    being referenced but are not directly declared. In the
    <varname>simple-model</varname> project, the dependency plugin indicates a
    "used undeclared dependency" on
    <varname>javax.persistence:persistence-api</varname>. To investigate
    further, go to the <varname>simple-model</varname> directory and run the
    <varname>dependency:tree</varname> goal which will list all of the
    project's direct and transitive dependencies.</para>

    <screen>$ <command>mvn dependency:tree</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'dependency'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree]
[INFO] org.sonatype.mavenbook.ch08:simple-model:jar:1.0
[INFO] +- org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[INFO] |  \- javax.persistence:persistence-api:jar:1.0:compile
[INFO] +- org.hibernate:hibernate:jar:3.2.5.ga:compile
[INFO] |  +- net.sf.ehcache:ehcache:jar:1.2.3:compile
[INFO] |  +- commons-logging:commons-logging:jar:1.0.4:compile
[INFO] |  +- asm:asm-attrs:jar:1.5.3:compile
[INFO] |  +- dom4j:dom4j:jar:1.6.1:compile
[INFO] |  +- antlr:antlr:jar:2.7.6:compile
[INFO] |  +- cglib:cglib:jar:2.1_3:compile
[INFO] |  +- asm:asm:jar:1.5.3:compile
[INFO] |  \- commons-collections:commons-collections:jar:2.1.1:compile
[INFO] \- junit:junit:jar:3.8.1:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

    <para>From this output, we can see above that the
    <varname>persistence-api</varname> dependency is coming from
    <varname>hibernate</varname>. A cursory scan of the source in this module
    will reveal many <varname>javax.persistence</varname> import statements
    confirming that we are, indeed, directly referencing this dependency. The
    simple fix is to add a direct reference to the dependency. In this
    example, we put the dependency version in
    <varname>simple-parent</varname>'s<sgmltag> dependencyManagement</sgmltag>
    section because the dependency is linked to Hibernate, and the Hibernate
    version is declared here. Eventually you are going to want to upgrade your
    project's version of Hibernate, listing the
    <varname>persistence-api</varname> dependency version near the Hibernate
    dependency version will make it more obvious later when your team modifies
    the parent <acronym>POM</acronym> to upgrade the Hibernate version.
    </para>

    <para>If you look at the <varname>dependency:analyze</varname> output from
    the <varname>simple-web</varname> module, you will see that we also need
    to add a direct reference to the <varname>simple-model</varname>
    dependency. The code in <varname>simple-webapp</varname> directly
    references the model objects in <varname>simple-model</varname>, and the
    <varname>simple-model</varname> is exposed to
    <varname>simple-webapp</varname> as a transitive dependency via
    <varname>simple-persist</varname>. Since this is a sibling dependency
    which shares both the <varname>version</varname> and
    <varname>groupId</varname>, the dependency can be defined in
    <varname>simple-webapp</varname>'s <filename>pom.xml</filename> using the
    <varname>${project.groupId}</varname> and
    <varname>${project.version}</varname>.</para>

    <para>How did the Maven Dependency plugin uncover these issues? How does
    <varname>dependency:analyze</varname> know what classes and dependencies
    are directly referenced by your project's bytecode? The Dependency plugin
    uses the <ulink url="http://asm.objectweb.org/">ObjectWeb ASM</ulink>
    toolkit to analyze the raw bytecode. The Dependency plugin uses ASM to
    walk through all the classes in the current project and it builds a list
    of every other class referenced. It then walks through all the
    dependencies, direct and transitive, and marks off the classes discovered
    in the direct dependencies. Any classes not located in the direct
    dependencies are discovered in the transitive dependencies, and the list
    of "used, undeclared dependencies" is produced.</para>

    <para>In contrast, the list of Unused, Declared dependencies is a little
    trickier to validate, and less useful than the "Used, Undeclared
    Dependencies". For one, some dependencies are used only at runtime or for
    tests and they won't be found in the bytecode. These are pretty obvious
    when you see them in the output; for example, JUnit appears in this list,
    but this is expected as it is only used for unit tests. You'll also notice
    that the Velocity and Servlet API dependencies are listed in this list for
    the simple-web module. This is also expected because, while the project
    doesn't have any direct references to the classes of these artifacts, they
    are still essential during runtime. </para>

    <para>Be careful when removing any Unused, Declared Dependencies unless
    you have very good test coverage, or you might introduce a runtime error.
    A more sinister issue pops up with bytecode optimization. For example, it
    is legal for a compiler to substitute the value of a constant and optimize
    away the reference. Removing this dependency will cause the compile to
    fail, yet the tool shows it as unused. Future versions of the Maven
    Dependency Plugin will provide better techniques for detecting and/or
    ignoring these types of issues.</para>

    <para>You should use the <varname>dependency:analyze</varname> tool
    periodically to detect these common errors in your projects. It can be
    configured to fail the build if certain conditions are found, and it is
    also available as a report.</para>
  </section>

  <section>
    <title>Final POMs</title>

    <para>As a final overview, the final <acronym>POM</acronym> files are
    listed as a reference for this chapter. Here is the top-level
    <acronym>POM</acronym> for <varname>simple-parent</varname>:</para>

    <example>
      <title>Final POM for simple-parent</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Chapter 8 Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-command&lt;/module&gt;
    &lt;module&gt;simple-model&lt;/module&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-persist&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
        &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
        &lt;version&gt;1.0&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;      </programlisting>
    </example>

    <para>The following <acronym>POM</acronym> captures the
    <acronym>POM</acronym> for <varname>simple-command</varname>, the
    command-line version of the tool.</para>

    <example>
      <title>Final POM for simple-command</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-command&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Command Line Tool&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;archive&gt;
              &lt;manifest&gt;
                &lt;mainClass&gt;org.sonatype.mavenbook.weather.Main&lt;/mainClass&gt;
                &lt;addClasspath&gt;true&lt;/addClasspath&gt;
              &lt;/manifest&gt;
            &lt;/archive&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
         &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;descriptorRefs&gt;
              &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
            &lt;/descriptorRefs&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;    
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>This next <acronym>POM</acronym> is the
    <varname>simple-model</varname> project's <acronym>POM</acronym>. The
    <varname>simple-model</varname> project contains all of the model objects
    used throughout the application.</para>

    <example>
      <title>Final POM for simple-model</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Object Model&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
      &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>This next <acronym>POM</acronym> is the
    <varname>simple-persist</varname> project's <acronym>POM</acronym>. The
    <varname>simple-persist</varname> project contains all of the persistence
    logic which is implemented using Hibernate.</para>

    <example>
      <title>Final POM for simple-persist</title>

      <programlisting langauge="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Persistence API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;
      &lt;artifactId&gt;geronimo-jta_1.1_spec&lt;/artifactId&gt;
      &lt;version&gt;1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>The <varname>simple-weather</varname> project is the project which
    contains all of the logic to parse the Yahoo! Weather
    <acronym>RSS</acronym> feed. This project depends on the
    <varname>simple-model</varname> project.</para>

    <example>
      <title>Final POM for simple-weather</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Weather API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>Finally, the <varname>simple-webapp</varname> project contains a web
    application which stores retrieved weather forecasts in an
    <acronym>HSQLDB</acronym> database and which also interacts with the
    libraries generated by the <varname>simple-weather</varname>
    project.</para>

    <example>
      <title>Final POM for simple-webapp</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Web Application&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;
      &lt;artifactId&gt;geronimo-servlet_2.4_spec&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;standard&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.9&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;hsqldb&lt;/groupId&gt;
            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
            &lt;version&gt;${hsqldb.version}&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>
    </example>
  </section>

  <section>
    <title>Conclusion</title>

    <para>This chapter has shown you several techniques to improve the control
    of your dependencies and plugins to ease future maintenance of your
    builds. We recommend periodically reviewing your builds in this way to
    ensure that duplication and thus potential trouble spots are minimized. As
    a project matures, new dependencies are inevitably introduced and you may
    find that a dependency previously used in one place is now used in 10 and
    should be moved up. The used and unused dependencies list changes over
    time and can easily be cleaned up with the Maven Dependency Plugin</para>
  </section>
</chapter>
