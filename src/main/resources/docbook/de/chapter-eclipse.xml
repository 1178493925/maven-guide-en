<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="eclipse">
  <title>Maven and Eclipse: m2eclipse</title>

  <section>
    <title>Introduction</title>

    <para>The Eclipse IDE is the most widely used IDE for Java development
    today. Eclipse has a huge amount of plugins (see <ulink
    url="http://www.eclipseplugincentral.com/">http://www.eclipseplugincentral.com/</ulink>)
    and an innumerable amount of organizations developing their own software
    on top of it. Quite simply, Eclipse is ubiquitous. The <ulink
    url="http://m2eclipse.codehaus.org/">m2Eclipse</ulink> project, provides
    support for Maven within the Eclipse IDE, and, in this chapter, we will
    explore the features it provides to help you use Maven with
    Eclipse.</para>
  </section>

  <section>
    <title>m2eclipse</title>

    <para>The m2Eclipse plugins (<ulink
    url="http://m2eclipse.codehaus.org/">http://m2eclipse.codehaus.org/</ulink>)
    provide Maven integration for Eclipse. m2Eclipse also has hooks into the
    features of both the Subclipse plugin (<ulink
    url="http://subclipse.tigris.org/">http://subclipse.tigris.org/</ulink>)
    and the Mylyn plugin (<ulink
    url="http://www.eclipse.org/mylyn/">http://www.eclipse.org/mylyn/</ulink>).
    The Subclipse plugin provides the m2eclipse plugin with the ability to
    interact with Subversion repositories, and the Mylyn plugin provides the
    m2eclipse plugin with the ability to interact with a task-focused
    interface that can keep track of development context. Just a few of the
    features m2eclipse provides include:<itemizedlist>
        <listitem>
          <para>Creating and importing Maven projects</para>
        </listitem>

        <listitem>
          <para>Dependency management and integration with the Eclipse
          classpath</para>
        </listitem>

        <listitem>
          <para>Automatic dependency downloads and updates</para>
        </listitem>

        <listitem>
          <para>Artifact Javadoc and source resolution</para>
        </listitem>

        <listitem>
          <para>Creating projects with Maven Archetypes</para>
        </listitem>

        <listitem>
          <para>Browsing and searching remote Maven repositories</para>
        </listitem>

        <listitem>
          <para>POM management with automatic update to dependency list</para>
        </listitem>

        <listitem>
          <para>Materializing a project from a Maven POM</para>
        </listitem>

        <listitem>
          <para>Checking out a Maven project from several SCM
          repositories</para>
        </listitem>

        <listitem>
          <para>Adapting nested multi-module Maven projects to the Eclipse
          IDE</para>
        </listitem>

        <listitem>
          <para>Integration with Web Tools Project (WTP)</para>
        </listitem>

        <listitem>
          <para>Integration with AspectJ Development Tools (AJDT)</para>
        </listitem>

        <listitem>
          <para>Integration with Subclipse</para>
        </listitem>

        <listitem>
          <para>Integration with Mylyn</para>
        </listitem>
      </itemizedlist></para>

    <para>There are many more features in m2eclipse beyond the list above and
    this chapter introduces some of the more impressive features that are
    currently available. Letâ€™s get started by installing the m2Eclipse
    plugin.</para>
  </section>

  <section>
    <title>Installing the m2eclipse Plugin</title>

    <para>To install the m2Eclipse plugin, you will need to install some
    prerequisites. You will need to be running Eclipse 3.2 or higher,
    <acronym>JDK</acronym> 1.4 or higher, and you will also need to make sure
    that Eclipse is running on a <acronym>JDK</acronym> and not a
    <acronym>JRE</acronym>. Once you have Eclipse and a compatible
    <acronym>JDK</acronym>, you will need to install two Eclipse plugins:
    Subclipse and Mylyn.</para>

    <section>
      <title>Installing Prerequisites</title>

      <para>You can install these prerequisites when you install m2eclipse,
      just add a new remote update site to Eclipse for each of the
      prerequisite components. To install these prerequisites, go to
      <menuchoice>
          <guiicon>Help</guiicon>

          <guisubmenu>Software Updates</guisubmenu>

          <guimenuitem>Find and Install...</guimenuitem>
        </menuchoice>. Selecting this menu item will load the Install/Update
      dialog box. Choose the "Search for new features to install" option and
      click <guibutton>Next</guibutton>. You will then be presented with a
      list of "Update sites to visit". Click <guibutton>New Remote
      Site...</guibutton>, and add a new update site for each new
      prerequisite. Add a new remote site for each plugin and then make sure
      that the remote site is selected. After you click
      <guibutton>Finish</guibutton>, Eclipse will then ask you to select
      plugins components to install. Select the components you want to install
      and Eclipse will download, install, and configure your plugins.</para>

      <para>Note that if you are using a recent build of Eclipse 3.4
      (Ganymede) your plugin installation experience may be slightly
      different. In Ganymede, you will select <menuchoice>
          <guimenu>Help</guimenu>

          <guimenuitem>Software Updates...</guimenuitem>
        </menuchoice> which will load the "Software Updates and Add-ons"
      dialog. In this dialog, choose the Available Software panel and click on
      <guibutton>Add Site...</guibutton> which will load the simple "Add Site"
      dialog. Enter the <acronym>URL</acronym> of the update site you wish to
      add and click <guibutton>OK</guibutton>. In the "Software Updates and
      Add-ons" dialog, the available plugins from an update site will appear
      as soon as the site is added. You can then select the modules you want
      to install and click the <guibutton>Install... </guibutton>button.
      Eclipse will then resolve all the dependencies for the selected plugins,
      and ask you to agree to the plugin license. After Eclipse installs new
      plugins, it will likely ask you for permission to restart.</para>

      <section>
        <title>Installing Subclipse</title>

        <para>To install Subclipse, use the Eclipse plugin update site listed
        below.<itemizedlist>
            <listitem>
              <para>Subclipse 1.2: <ulink
              url="http://subclipse.tigris.org/update_1.2.x">http://subclipse.tigris.org/update_1.2.x</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>For other versions of Subclipse, and for more information about
        the Subclipse plugin, please see the Subclipse project's web site at
        <ulink
        url="http://subclipse.tigris.org/">http://subclipse.tigris.org/</ulink>.</para>
      </section>

      <section>
        <title>Installing Mylyn</title>

        <para>To install JIRA integration with Mylyn, add the Mylyn extras
        Eclipse update URL, you'll want to do this if your organization uses
        <ulink url="http://www.atlassian.com/software/jira/">Atlassian's
        JIRA</ulink> for issue tracking. To install Mylyn use the following
        update sites:<itemizedlist>
            <listitem>
              <para>Mylyn (Eclipse 3.3): <ulink
              url="http://download.eclipse.org/tools/mylyn/update/e3.3">http://download.eclipse.org/tools/mylyn/update/e3.3
              </ulink></para>
            </listitem>

            <listitem>
              <para>Mylyn (Eclipse 3.4): <ulink
              url="http://download.eclipse.org/tools/mylyn/update/e3.4">http://download.eclipse.org/tools/mylyn/update/e3.4</ulink></para>
            </listitem>

            <listitem>
              <para>Mylyn Extras (JIRA Support): <ulink
              url="http://download.eclipse.org/tools/mylyn/update/extras">http://download.eclipse.org/tools/mylyn/update/extras</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>For more information about the Mylyn project, see the Mylyn
        project's web site at <ulink
        url="http://www.eclipse.org/mylyn/">http://www.eclipse.org/mylyn/</ulink>.</para>
      </section>

      <section>
        <title>Installing AspectJ Development Tools (AJDT)</title>

        <para>If you are installing the 0.9.4 release of m2eclipse, you may
        also want to install both the Web Tools Platform
        (<acronym>WTP</acronym>) and the AspectJ Development Tools
        (<acronym>AJDT</acronym>). To install the <acronym>AJDT</acronym> use
        one of the following update URLs in Eclipse:<itemizedlist>
            <listitem>
              <para>AJDT (Eclipse 3.3): <ulink
              url="http://download.eclipse.org/tools/ajdt/33/update">http://download.eclipse.org/tools/ajdt/33/update</ulink></para>
            </listitem>

            <listitem>
              <para>AJDT (Eclipse 3.4): <ulink
              url="http://download.eclipse.org/tools/ajdt/34/dev/update">http://download.eclipse.org/tools/ajdt/34/dev/update</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>For more information about the AJDT project, see the AJDT
        project's web site at <ulink
        url="http://www.eclipse.org/ajdt/">http://www.eclipse.org/ajdt/</ulink>.</para>
      </section>

      <section>
        <title>Installing the Web Tools Platform (WTP)</title>

        <para>To install the Web Tools Platform (<acronym>WTP</acronym>). Use
        one of the following update URLs in Eclipse, or just look for the Web
        Tools Project in the Discovery Site which should already be in your
        Eclipse remote update sites list.<itemizedlist>
            <listitem>
              <para>WTP: <ulink
              url="http://download.eclipse.org/webtools/updates/">http://download.eclipse.org/webtools/updates/</ulink></para>
            </listitem>
          </itemizedlist></para>

        <para>For more information about the Web Tools Platform, see the Web
        Tools Platform project's web site at <ulink
        url="http://www.eclipse.org/webtools/">http://www.eclipse.org/webtools/</ulink>.</para>
      </section>
    </section>

    <section>
      <title>Installing m2eclipse</title>

      <para>Once you've installed the prerequisites, you can install the
      m2eclipse plugin from the following Eclipse update URL:<itemizedlist>
          <listitem>
            <para>m2eclipse Plugin: <ulink
            url="http://m2eclipse.sonatype.org/update/">http://m2eclipse.sonatype.org/update/</ulink></para>
          </listitem>
        </itemizedlist></para>

      <para>If you would like to install the latest snapshot development
      version of the plugin, you should use the update-dev
      <acronym>URL</acronym> instead of the previous
      <acronym>URL</acronym>:<itemizedlist>
          <listitem>
            <para>m2eclipse Plugin (Development Snapshot): <ulink
            url="http://m2eclipse.sonatype.org/update-dev/">http://m2eclipse.sonatype.org/update-dev/</ulink></para>
          </listitem>
        </itemizedlist></para>

      <para>To install m2eclipse, just add a the appropriate update site for
      m2eclipse. Go to <menuchoice>
          <guiicon>Help</guiicon>

          <guisubmenu>Software Updates</guisubmenu>

          <guimenuitem>Find and Install...</guimenuitem>
        </menuchoice>. Selecting this menu item will load the Install/Update
      dialog box. Choose the "Search for new features to install" option and
      click <guibutton>Next</guibutton>. You will then be presented with a
      list of "Update sites to visit". Click <guibutton>New Remote
      Site...</guibutton>, and add a new update site for m2eclipse. Add a new
      remote site for m2eclipse and then make sure that the remote site is
      selected. After you click <guibutton>Finish</guibutton>, Eclipse will
      then ask you to select plugins components to install. Select the
      components you want to install and Eclipse will download, install, and
      configure m2eclipse.</para>

      <para>If you've installed the plugin successfully, you should see a
      Maven option in the list of preferences options when you go to
      <menuchoice>
          <guiicon>Window</guiicon>

          <guimenuitem>Preferences...</guimenuitem>
        </menuchoice>.</para>
    </section>
  </section>

  <section>
    <title>Enabling the Maven Console</title>

    <para>Before we begin to examine the features of m2eclipse, letâ€™s first
    enable the Maven console. Open the Console View by going to <menuchoice>
        <guimenu>Window</guimenu>

        <guisubmenu>Show View</guisubmenu>

        <guimenuitem>Console</guimenuitem>
      </menuchoice>. Then click on the little arrow on the right-hand side of
    the Open Console icon and select Maven Console as shown below:</para>

    <figure>
      <title>Enabling the Maven Console in Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_console.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Maven Console shows the Maven output that normally appears on the
    console when running Maven from the command line. It is useful to be able
    to see what Maven is doing and to work with Maven debug output to diagnose
    issues.</para>
  </section>

  <section>
    <title>Creating a Maven Project</title>

    <para>When using Maven, project creation takes place through the use of a
    Maven archetype. In Eclipse, project creation takes place via the new
    project wizard. The new project wizard inside of Eclipse offers a plethora
    of templates for creating new projects. The m2eclipse plugin improves upon
    this wizard to provide the following additional capabilities:<itemizedlist>
        <listitem>
          <para>Checking out a Maven project from a SCM repository</para>
        </listitem>

        <listitem>
          <para>Creating a Maven project using a Maven archetype</para>
        </listitem>

        <listitem>
          <para>Creating a Maven <acronym>POM</acronym> file</para>
        </listitem>
      </itemizedlist></para>

    <para>As shown in <xref linkend="fig-eclipse-new" />, all three of these
    options are important to developers using Maven. Letâ€™s take a look at each
    one.</para>

    <figure id="fig-eclipse-new">
      <title>Creating a New Project with m2eclipse Wizards</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/eclipse_create-wizard.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Checking Out a Maven Project from SCM</title>

      <para>m2eclipse provides the ability to check out a project directly
      from a SCM repository. Simply enter the SCM information for a project
      and it will check it out for you to a location of your choice as shown
      in <xref linkend="fig-eclipse-new-checkout" />:</para>

      <figure id="fig-eclipse-new-checkout">
        <title>Checkout a New Project from Subversion</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_checking-out.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>There are additional options in this dialog for specifying a
      particular revision by browsing the revisions in a Subversion repository
      or by simply entering the revision number manually. These features reuse
      of some of the features in the Subclipse plugin to interact with the
      Subversion repository. In addition to Subversion, the m2eclipse plugin
      also supports the following SCM providers:<itemizedlist>
          <listitem>
            <para>Bazaar</para>
          </listitem>

          <listitem>
            <para>Clearcase</para>
          </listitem>

          <listitem>
            <para>CVS</para>
          </listitem>

          <listitem>
            <para>git</para>
          </listitem>

          <listitem>
            <para>hg</para>
          </listitem>

          <listitem>
            <para>Perforce</para>
          </listitem>

          <listitem>
            <para>Starteam</para>
          </listitem>

          <listitem>
            <para>Subversion</para>
          </listitem>

          <listitem>
            <para>Synergy</para>
          </listitem>

          <listitem>
            <para>Visual SourceSafe</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section id="sect-m2e-create-archetype">
      <title>Creating a Maven Project from a Maven Archetype</title>

      <para>m2eclipse offers the ability to create a Maven project using a
      Maven Archetype. There are many Maven Archetypes provided in the list
      that comes with m2eclipse as shown in <xref
      linkend="fig-eclipse-new-archetype" />.</para>

      <figure id="fig-eclipse-new-archetype">
        <title>Creating a New Project with a Maven Archetype</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_new-maven.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The list of archetypes in <xref
      linkend="fig-eclipse-new-archetype" /> is a list generated by something
      called the Nexus Indexer. Nexus is a repository manager which is
      introduced in <xref linkend="repository-manager" />. The Nexus indexer
      is a file which contains an index of the entire Maven repository, and
      m2eclipse uses it to list all of the available archetypes in the entire
      Maven repository. When this chapter was last updated, m2eclipse had
      approximately ninety archetypes in this Archetype dialog. Highlights of
      this list include:<itemizedlist>
          <listitem>
            <para>Standard Maven Archetypes to create</para>

            <itemizedlist>
              <listitem>
                <para>Maven Plugins</para>
              </listitem>

              <listitem>
                <para>Simple Web Applications</para>
              </listitem>

              <listitem>
                <para>Simple Projects</para>
              </listitem>

              <listitem>
                <para>New Maven Archetypes</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><ulink
            url="http://databinder.net/site/show/overview">Databinder</ulink>
            Archetypes (data-driven Wicket Applications) under
            <varname>net.databinder</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://cocoon.apache.org/">Apache Cocoon</ulink>
            Archetypes under <varname>org.apache.cocoon</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://directory.apache.org">Apache Directory
            Server</ulink> Archetypes under
            <varname>org.apache.directory.server</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://geronimo.apache.org">Apache
            Geronimo</ulink> Archetypes under
            <varname>org.apache.geronimo.buildsupport</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://myfaces.apache.org">Apache
            MyFaces</ulink> Archetypes under
            <varname>org.apache.myfaces.buildtools</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://tapestry.apache.org">Apache
            Tapestry</ulink> Archetypes under
            <varname>org.apache.tapestry</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://wicket.apache.org">Apache Wicket</ulink>
            Archetypes under <varname>org.apache.wicket</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://appfuse.org/display/APF/Home">AppFuse</ulink>
            Archetypes under <varname>org.appfuse.archetypes</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://cargo.codehaus.org/">Codehaus
            Cargo</ulink> Archetypes under
            <varname>org.codehaus.cargo</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://castor.codehaus.org/">Codehaus
            Castor</ulink> Archetypes under
            <varname>org.codehaus.castor</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://groovy.codehaus.org/GMaven">Groovy-based
            Maven Plugin</ulink> Archetypes (deprecated)<footnoteref
            linkend="foot-gmaven" /> under
            <varname>org.codehaus.mojo.groovy</varname></para>
          </listitem>

          <listitem>
            <para>Jini Archetypes</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://mule.mulesource.org/display/MULE/Home">Mule</ulink>
            Archetypes under <varname>org.mule.tools</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://fractal.objectweb.org/index.html">Objectweb
            Fractal</ulink> Archetypes under
            <varname>org.objectweb.fractal</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://petals.objectweb.org/index.html">Objectweb
            Petals</ulink> Archetypes under
            <varname>org.objectweb.petals</varname></para>
          </listitem>

          <listitem>
            <para>ops4j Archetypes under <varname>org.ops4j</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.parancoe.org/">Parancoe</ulink> under
            <varname>org.parancoe</varname></para>
          </listitem>

          <listitem>
            <para>slf4j Archetypes under <varname>org.slf4j</varname></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.springframework.org">Springframework</ulink>
            <acronym>OSGI</acronym> and Web Services Archetypes under
            <varname>org.springframework</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://www.trailsframework.org/">Trails
            Framework</ulink> Archetypes under
            <varname>org.trailsframework</varname></para>
          </listitem>
        </itemizedlist></para>

      <para><footnote id="foot-gmaven">
          <para>Don't use the Groovy Maven Plugin in Codehaus' Mojo project.
          Jason Dillon has moved the Groovy Maven integration to the Groovy
          project in codehaus. For more information see <ulink
          url="http://groovy.codehaus.org/GMaven">http://groovy.codehaus.org/GMaven</ulink>.</para>
        </footnote>And these were just the archetypes that were listed under
      the Nexus Indexer Catalog, if you switch Catalogs you'll see other
      archetypes. While your results may vary, the following additional
      archetypes were available in the Internal Catalog:<itemizedlist>
          <listitem>
            <para><ulink url="http://www.atlassian.com">Atlassian
            Confluence</ulink> Plugin Archetype under
            <varname>com.atlassian.maven.archetypes</varname></para>
          </listitem>

          <listitem>
            <para><ulink url="http://struts.apache.org">Apache Struts</ulink>
            Archetypes under <varname>org.apache.struts</varname></para>
          </listitem>

          <listitem>
            <para>Apache Shale Archetypes under
            <varname>org.apache.shale</varname></para>
          </listitem>
        </itemizedlist></para>

      <para>A catalog is simply a reference to a repository index. You can
      manage the set of catalogs that the m2eclipse plugin knows about by
      clicking on the <guibutton>Configure... </guibutton>button next to the
      catalog drop down. If you have your own archetypes to add to this list,
      you can click on <guibutton>Add Archetype...</guibutton>.</para>

      <para>Once you choose an archetype, Maven will retrieve the appropriate
      artifact from the Maven repository and create a new Eclipse project with
      the selected archetype.</para>
    </section>

    <section>
      <title>Creating a Maven Module</title>

      <para>m2eclipse provides the ability to create a Maven module. Creating
      a Maven module is almost identical to creating a Maven project as it
      also creates a new Maven project using a Maven archetype. However, a
      Maven module is a subproject of another Maven project typically known as
      a parent project.</para>

      <figure id="fig-eclipse-new-module">
        <title>Creating a New Maven Module</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_new-module.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>When creating a new Maven module you must select a parent project
      that already exists inside of Eclipse. Clicking the browse button
      displays a list of projects that already exist as shown in <xref
      linkend="fig-eclipse-select-parent" />:</para>

      <figure id="fig-eclipse-select-parent">
        <title>Selecting a Parent Project for a New Maven Module</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_select-project.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>After selecting a parent project from the list, you are returned
      to the New Maven Module window and the Parent Project field is populated
      as shown in <xref linkend="fig-eclipse-new-module" />. Clicking
      <guibutton>Next</guibutton> will then display the standard list of
      archetypes from <xref linkend="sect-m2e-create-archetype" /> so you can
      choose which one should be used to create the Maven module.</para>
    </section>
  </section>

  <section>
    <title>Create a Maven POM File</title>

    <para>Another important feature m2eclipse offers is the ability to create
    a new Maven <acronym>POM</acronym> file. m2eclipse provides a wizard to
    easily create a new <acronym>POM</acronym> file inside of a project that
    is already in Eclipse. This POM creation wizard is shown in <xref
    linkend="fig-eclipse-create-pom" />:</para>

    <figure id="fig-eclipse-create-pom">
      <title>Creating a New POM</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_create-pom.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Creating a new Maven <acronym>POM</acronym> is just a matter of
    selecting a project, entering the Group Id, Artifact Id, Version, choosing
    the Packaging type, and providing a Name into the fields provided and
    m2eclipse. Click the Next button to start adding dependencies.</para>

    <figure id="fig-eclipse-add-dependencies">
      <title>Adding Dependencies to a New POM</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_additional-depends.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>As you can see in <xref linkend="fig-eclipse-add-dependencies" />
    here are no dependencies in the <acronym>POM</acronym> yet. Just click the
    <guibutton>Add</guibutton> button to query the central Maven repository
    for dependencies as shown next in <xref
    linkend="fig-eclipse-query-depend" />:</para>

    <figure id="fig-eclipse-query-depend">
      <title>Querying the Central Repository for Dependencies</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_add-dependency.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Querying for dependencies is as easy as entering the
    <varname>groupId</varname> for the artifact you need. <xref
    linkend="fig-eclipse-query-depend" /> shows a query for
    <varname>org.apache.commons</varname> with <varname>commons-vfs</varname>
    expanded to see which versions are available. Highlighting the
    <varname>1.1-SNAPSHOT</varname> version of <varname>commons-vfs</varname>
    and clicking <guibutton>OK</guibutton> takes you back to the dependency
    selection where you can either query for more artifacts or just click
    finish to create the <acronym>POM</acronym>. When you search for
    dependencies, m2eclipse is making use of the same Nexus repository index
    that is used in the Nexus Repository Manager from <xref
    linkend="repository-manager" />.</para>

    <para>Now that the youâ€™ve seen the m2eclipse features for creating a new
    project, letâ€™s look at a similar set of features for importing projects
    into Eclipse.</para>
  </section>

  <section>
    <title>Importing Maven Projects</title>

    <para>m2eclipse provides three options for importing a Maven project into
    Eclipse including:<itemizedlist>
        <listitem>
          <para>Import an existing Maven project</para>
        </listitem>

        <listitem>
          <para>Check out a Maven project from SCM</para>
        </listitem>

        <listitem>
          <para>Materialize a Maven project</para>
        </listitem>
      </itemizedlist></para>

    <para><xref linkend="fig-eclipse-import" /> shows the wizard for importing
    projects with the options for Maven provided by m2eclipse:</para>

    <figure id="fig-eclipse-import">
      <title>Importing a Maven Project</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%" fileref="figs/web/eclipse_import.png"
                     scale="" scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The dialog in <xref linkend="fig-eclipse-import" /> is displayed by
    using the <menuchoice>
        <guiicon>File</guiicon>

        <guimenuitem>Import</guimenuitem>
      </menuchoice> command in Eclipse and then filtering the options by
    entering the word maven in the filter field. As noted above, there are
    three options available for importing a Maven project into Eclipse
    including: Maven Projects, Check out Maven Project from Subversion, and
    Materialize Maven Projects.</para>

    <para>Importing a Maven project from Subversion is identical to the
    creation of a Maven project from Subversion as discussed in the previous
    section so discussion of it would be redundant. Letâ€™s move on now to
    review the other two options for importing a Maven project into
    Eclipse.</para>

    <section>
      <title>Importing a Maven Project</title>

      <para>m2eclipse can import a Maven project with an existing
      <filename>pom.xml</filename>. By pointing at the directory where a Maven
      project is located, m2eclipse detects all the Maven
      <acronym>POM</acronym>s in the project and provides a hierarchical list
      of them as shown in <xref linkend="fig-eclipse-import-multi" />.</para>

      <figure id="fig-eclipse-import-multi">
        <title>Importing a Multi-module Maven Project</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_import-project.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para><xref linkend="fig-eclipse-import-multi" /> displays the view of
      the project being imported. Notice that all the <acronym>POM</acronym>s
      from the project are listed in a hierarchy. This allows you to easily
      select which <acronym>POM</acronym>s (and therefore which projects) that
      you want to be imported into Eclipse. Once you select the project you
      would like to import, m2eclipse will import and build the project(s)
      using Maven.</para>
    </section>

    <section>
      <title>Materializing a Maven Project</title>

      <para>m2eclipse also offers the ability to "materialize" a Maven
      project. Materialization is similar to the process of checking out a
      Maven project from Subversion, but instead of manually entering the
      <acronym>URL</acronym> to the projectâ€™s Subversion repository, the
      Subversion <acronym>URL</acronym> is discovered from the projectâ€™s root
      <acronym>POM</acronym> file. You can use this feature to "materialize"
      projects from nothing more than a <acronym>POM</acronym> file if the
      <acronym>POM</acronym> file has the appropriate elements to specify the
      location of a source repository. Using this feature, you can browse the
      central Maven repository for projects, and materialize them into Eclipse
      projects. This comes in handy if your project depends on a third-party
      open source library, and you need to get your hands on the source code.
      Instead of tracking down the project web site and figuring out how to
      check it out of Subversion, just use the m2eclipse project to magically
      "materialize" the Eclipse project.</para>

      <para><xref linkend="fig-eclipse-materialize" /> shows the wizard after
      choosing to materialize Maven projects:</para>

      <figure id="fig-eclipse-materialize">
        <title>Materializing a Maven Project</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_import2.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Notice that the dialog box for Maven artifacts in <xref
      linkend="fig-eclipse-materialize" /> is empty. This is because no
      projects have been added yet. In order to add a project, you must click
      the <guibutton>Add</guibutton> button on the right side and select a
      dependency to add from the central Maven repository. <xref
      linkend="fig-eclipse-select-materialize" /> shows how to add a
      project:</para>

      <figure id="fig-eclipse-select-materialize">
        <title>Selecting Artifact to Materialize</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_add-depend.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Upon entering a query, candidate dependencies will be located in
      the local Maven repository. After a few seconds of indexing the local
      Maven repository, the list of candidate dependencies appears. Select the
      dependency to add and click OK so that they are added to the list as
      shown in <xref linkend="fig-eclipse-materialize-camel" />.</para>

      <figure condition="" id="fig-eclipse-materialize-camel">
        <title>Materializing Apache Camel</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_import-camel.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Upon adding a dependency, you have the option of telling the
      m2eclipse plugin to check out all projects for the artifact.</para>
    </section>
  </section>

  <section>
    <title>Running Maven Builds</title>

    <para>m2eclipse modified the <guimenu>Run As...</guimenu> and
    <guimenu>Debug As...</guimenu> menus to allow you to run a Maven build
    within Eclipse. <xref linkend="fig-m2e-runas" /> shows the <guimenu>Run
    As...</guimenu> menu for an m2eclipse project. From this menu you can run
    one of the more common lifecycle phases like clean, install, or package.
    You can also load up the Run configuration dialog window and configure a
    Maven build with parameters and more options.</para>

    <figure id="fig-m2e-runas">
      <title>Running an Eclipse build with Run As..</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_run-menu.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>If you need to configure a Maven build with more options, you can
    choose <guimenuitem>Run Configurations...</guimenuitem> and create a new
    Maven build. <xref linkend="fig-m2e-runconf" /> shows the Run dialog for
    configuring a Maven build.</para>

    <figure id="fig-m2e-runconf">
      <title>Configuring a Maven Build as a Run Configuration</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_run-config.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The Run configuration dialog allows you to specify multiple goals
    and profiles, it exposes options like "skip tests" and "update snapshots",
    and allows you to customize everything from the project to the JRE to the
    environment variable. You can use this dialog to support any custom Maven
    build that you wish to launch with m2eclipse.</para>
  </section>

  <section>
    <title>Working with Maven Projects</title>

    <para>The m2eclipse plugin also provides a set of features for working
    with Maven projects once they are inside of Eclipse. There are many
    features that ease the ability to use Maven in Eclipse so letâ€™s dive right
    into them. In the previous section, I materialized a Maven project and
    selected a subproject from the Apache Camel project named camel-core.
    Weâ€™ll use that project to demonstrate these features.</para>

    <para>By right-clicking on the camel-core project, and selecting the Maven
    menu item, you can see the available Maven features. <xref
    linkend="fig-eclipse-available-features" /> shows a screenshot of
    this:</para>

    <figure id="fig-eclipse-available-features">
      <title>Available Maven Features</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_available-features.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Notice in <xref linkend="fig-eclipse-available-features" /> the
    available Maven features for the camel-core project,
    including:<itemizedlist>
        <listitem>
          <para>Adding dependencies and plugins</para>
        </listitem>

        <listitem>
          <para>Updating dependencies, snapshots and source folders</para>
        </listitem>

        <listitem>
          <para>Creating a Maven module</para>
        </listitem>

        <listitem>
          <para>Downloading the source</para>
        </listitem>

        <listitem>
          <para>Opening Project URLs such as the Project Web Page, Issue
          Tracker, Source Control, and Continuous Integration tool.</para>
        </listitem>

        <listitem>
          <para>Enabling /Disabling workspace resolution, nested Maven modules
          and dependency management</para>
        </listitem>
      </itemizedlist></para>

    <para>These features are also big time savers so letâ€™s review them
    briefly.</para>

    <section>
      <title>Adding and Updating Dependencies and Plugins</title>

      <para>Letâ€™s say weâ€™d like to add a dependency or a plugin to the
      <varname>camel-core</varname> <acronym>POM</acronym>. For the sake of
      demonstration, we're going to add <varname>commons-lang</varname> as a
      dependency. (Please note that the functionality for adding a dependency
      or a plugin is exactly the same so weâ€™ll demonstrate it by adding a
      dependency.)</para>

      <para>m2eclipse offers two options for adding dependencies to a project.
      The first option is by manually editing the <acronym>POM</acronym> file
      to type in the <acronym>XML</acronym> to add the dependency. The
      downside to manually editing the <acronym>POM</acronym> file to add a
      dependency is that you must already know the information about the
      artifact, or use the features discussed in the next section to manually
      locate the artifact information in the repository indexes. The upside is
      that after manually adding the dependency and saving the
      <acronym>POM</acronym>, the projectâ€™s Maven Dependencies container will
      be automatically updated to include the new dependency. <xref
      linkend="fig-eclipse-manual-add" /> shows how I added a dependency for
      <varname>commons-lang</varname> to the <varname>camel-console</varname>
      <acronym>POM</acronym> and the Maven Dependencies container was
      automatically updated to included it:</para>

      <figure id="fig-eclipse-manual-add">
        <title>Manually Adding a Dependency to the Project's POM</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_add-manual-depend.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Manually adding a dependency works well but requires more work
      than the second approach. Upon manually adding the dependency element to
      the <acronym>POM</acronym>, the Eclipse progress in the lower right-hand
      corner of the Eclipse workbench reflects the action as shown in <xref
      linkend="fig-eclipse-update-depends" />:</para>

      <figure id="fig-eclipse-update-depends">
        <title>Updating Maven Dependencies</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_updating-depends.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The second option for adding a dependency is much easier because
      you donâ€™t have to know any information about about the artifact other
      than its <varname>groupId</varname>. <xref
      linkend="fig-eclipse-search-depend" /> shows this functionality:</para>

      <figure id="fig-eclipse-search-depend">
        <title>Searching for a Dependency</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_add-depend3.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>By simply entering a <varname>groupId</varname> into the query
      field, m2eclipse queries the repository indexes and even shows a version
      of the artifact that is currently in my local Maven repository. This
      option is preferred because it is such a tremendous time saver. With
      m2eclipse, you no longer need to hunt through the central Maven
      repository for an artifact version.</para>
    </section>

    <section>
      <title>Creating a Maven Module</title>

      <para>m2eclipse makes it very easy to create a series of nested projects
      in a multi-module Maven project. If you have a parent project, and you
      want to add a module to the project, just right click on the project, go
      the Maven menu, and choose "New Maven Module Project". m2eclipse will
      walk you through the project creation process to create a new project,
      then it will update the parent project's POM to include the module
      reference. Before m2eclipse came along it was very difficult to use a
      hierarchy of Maven projects within Eclipse. With m2eclipse, the details
      of the underlying relationships between parent and child projects are
      integrated into the development environment.</para>
    </section>

    <section>
      <title>Downloading Source</title>

      <para>If the central Maven repository contains a source artifact for a
      particular project, you can download the source from the repository and
      expose it to the Eclipse environment. When you are trying to debug a
      complex issue in Eclipse, nothing can be easier than being able to right
      click on a third-party dependency and drill into the code in the Eclipse
      debugger. Select this option, and m2eclipse will attempt to download the
      source artifact from the Maven repository. If it is unable to retrieve
      this source artifact, you should ask the maintainers of the project in
      question to upload the appropriate Maven source bundle to the central
      Maven repository.</para>
    </section>

    <section>
      <title>Opening Project Pages</title>

      <para>A Maven <acronym>POM</acronym> contains some valuable
      <acronym>URL</acronym>s which a developer may need to consult. These are
      the project's web page, the <acronym>URL</acronym> for the source code
      repository, a <acronym>URL</acronym> for a continuous integration system
      like Hudson, and a <acronym>URL</acronym> for an issue tracker. If these
      <acronym>URL</acronym>s are present in a project's
      <acronym>POM</acronym>, m2eclipse will open these project pages in a
      browser.</para>
    </section>

    <section>
      <title>Resolving Dependencies</title>

      <para>You can configure a project to resolve dependencies from a
      workspace. This has the effect of altering the way that Maven locates
      dependency artifacts. If a project is configured to resolve dependencies
      from the workspace, these artifacts do not need to be present in your
      local repository. Assume that project-a and project-b are both in the
      same Eclipse workspace, and that project-a depends on project-b. If
      workspace resolution is disabled, the m2eclipse Maven build for
      <varname>project-a</varname> will only succeed if
      <varname>project-b</varname>'s artifact is present in the local
      repository. If workspace resolution is enabled, m2eclipse will resolve
      the dependency via the eclipse workspace. In other words, when workspace
      resolution is enabled, project's don't have to be installed in the local
      repository to relate to one another.</para>

      <para>You can also disable dependency management. This has the effect of
      telling m2eclipse to stop trying to manage your project's classpath, and
      it will remove the Maven Dependencies classpath container from your
      project. If you do this, you are essentially on your own when it comes
      to managing your project's classpath.</para>
    </section>
  </section>

  <section>
    <title>Working with Maven Repositories</title>

    <para>m2eclipse also provides some tools to make working with Maven
    repositories a bit easier. These tools provide functionality
    for:<itemizedlist>
        <listitem>
          <para>Searching for Artifacts</para>
        </listitem>

        <listitem>
          <para>Searching for Java classes</para>
        </listitem>

        <listitem>
          <para>Indexing Maven repositories</para>
        </listitem>
      </itemizedlist></para>

    <section>
      <title>Searching For Maven Artifacts and Java classes</title>

      <para>m2eclipse adds a couple of items to the Eclipse Navigation menu
      that make searching for Maven Artifacts and Java classes easy work. Each
      option is available by clicking on the <guimenu>Navigate</guimenu> menu
      as shown in <xref linkend="fig-eclipse-nav-search" />:</para>

      <figure id="fig-eclipse-nav-search">
        <title>Searching for Artifacts and Classes</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_navigate.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Notice the available options in <xref
      linkend="fig-eclipse-nav-search" /> under the Eclipse
      <guimenu>Navigate</guimenu> menu named <guimenuitem>Open Maven
      POM</guimenuitem> and <guimenuitem>Open Type from Maven</guimenuitem>.
      The <guimenuitem>Open Maven POM</guimenuitem> option allows you to
      search the Maven repository for a given <acronym>POM</acronym> as shown
      in <xref linkend="fig-eclipse-search-pom" />:</para>

      <figure id="fig-eclipse-search-pom">
        <title>Searching for a POM</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_search-pom.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Upon selecting an artifact and clicking <guibutton>OK</guibutton>,
      the <acronym>POM</acronym> for that artifact is opened in Eclipse for
      browsing or editing. This is handy when you need to take a quick look at
      the <acronym>POM</acronym> for a given artifact.</para>

      <para>The second m2eclipse option in the <guimenu>Navigate</guimenu>
      menu is named <guimenuitem>Open Type from Maven</guimenuitem>. This
      feature allows you to search for a Java class by name in a remote
      repository. Upon opening this dialog, simply type â€˜factorybeanâ€™ and
      youâ€™ll see many classes with the name <classname>FactoryBean</classname>
      in them as shown in <xref linkend="fig-eclipse-search-class" />:</para>

      <figure id="fig-eclipse-search-class">
        <title>Searching the Repository for a Class</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_search-class.png"
                       scalefit="1" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>This is a big time saving feature because it means that manually
      searching through artifacts in a Maven repository for a particular class
      is a thing of the past. If you need to use a specific class, just fire
      up Eclipse, go to the <guimenu>Navigate</guimenu> menu and search for
      the class. m2eclipse will show you the list of artifacts in which it
      appears.</para>
    </section>

    <section>
      <title>Indexing Maven Repositories</title>

      <para>The Maven Indexes View allows you to manually navigate to
      <acronym>POM</acronym>s in a remote repository and open them in Eclipse.
      To see this View, go to <menuchoice>
          <guiicon>View</guiicon>

          <guisubmenu>Show View</guisubmenu>

          <guimenuitem>Other</guimenuitem>
        </menuchoice>, type the word "maven" into the search box and you
      should see a view named Maven Indexes as shown in <xref
      linkend="fig-eclipse-show-indexes" />:</para>

      <figure id="fig-eclipse-show-indexes">
        <title>Show Maven Indexes View</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_show-view.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Select this View and click <guibutton>OK</guibutton>. This will
      show the Maven Indexes View as shown in <xref
      linkend="fig-eclipse-indexes-view" />:</para>

      <figure id="fig-eclipse-indexes-view">
        <title>Maven Indexes View</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_indexes.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Additionally, <xref linkend="fig-eclipse-indexes-find-pom" />
      shows the Maven Indexes View after manually navigating to locate a
      POM:</para>

      <figure id="fig-eclipse-indexes-find-pom">
        <title>Locating a POM from the Indexes View</title>

        <mediaobject>
          <imageobject>
            <imagedata contentdepth="100%"
                       fileref="figs/web/eclipse_index2.png" scalefit="1"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>After finding the <varname>apache-camel</varname> artifact,
      double-clicking on it will open it up in Eclipse for browsing or
      editing.</para>

      <para>These features make working with remote repositories from inside
      of Eclipse so much easier and faster. After all the hours you may have
      spent doing these types of tasks by manually over the last few years -
      visiting repositories through a web browser, downloading artifacts and
      grepping through them for classes and POMs - you'll find that m2eclipse
      is a welcome change for the better.</para>
    </section>
  </section>

  <section>
    <title>Maven Preferences</title>

    <para>The ability to adjust the Maven preferences and some Maven options
    is an important aspect of developing with Maven and m2eclipse offers the
    ability to tweak these items via the Maven preferences page inside of
    Eclipse. Typically when using Maven on the command line, such preferences
    and options are available from files in your <filename>~/.m2</filename>
    directory and as command line options. m2eclipse provides access to some
    of the most important preferences and options from the Eclipse
    <acronym>IDE</acronym>. <xref linkend="fig-eclipse-maven-preferences" />
    shows the Maven preferences page in Eclipse:</para>

    <figure id="fig-eclipse-maven-preferences">
      <title>Maven Preferences for Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_preferences.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The check boxes in the top section provide the ability
    to:<itemizedlist>
        <listitem>
          <para>Run Maven in Offline mode, disabling any downloads from remote
          repositories</para>
        </listitem>

        <listitem>
          <para>Enable Debug output in the Maven Console</para>
        </listitem>

        <listitem>
          <para>Download Source jars for artifacts from remote Maven
          repositories</para>
        </listitem>

        <listitem>
          <para>Download JavaDoc jars for artifacts from remote Maven
          repositories</para>
        </listitem>

        <listitem>
          <para>Download and Update local indexes for remote repositories on
          startup</para>
        </listitem>
      </itemizedlist></para>

    <para>The next section offers a pop-up menu to select which goal youâ€™d
    like to be executed when a project is imported and when the source folders
    for a given project are updated. The default goal is named
    <varname>process-resources</varname> which copies and process the
    resources for the project into the destination directory to make the
    project ready for packaging. Customizing this list of goals can come in
    handy if you need to run any custom goals which process resources or
    generate supporting configuration.</para>

    <para>If you need help selecting a goal, click the
    <guibutton>Select...</guibutton> button to see the "Goals" dialog. The
    dialog on the left-hand side of<xref
    linkend="fig-eclipse-goal-lifecycle" /> shows the Goals dialog with a list
    of all the phases in the default Maven lifecycle.</para>

    <figure id="fig-eclipse-goal-lifecycle">
      <title>Maven Goal Dialogs</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_preference-goals.png"
                     scalefit="1" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>When you see the Goals dialog for the first time, there's a chance
    you might be overwhelmed by the number of goals it lists. There are
    literally hundreds of Maven plugins for everything from generating a
    database, to running integration tests, to performing static analysis, to
    generating web services with XFire. There are over two hundred plugins
    with selectable goals in the Goals dialog, the dialog on the right-hand
    side of<xref linkend="fig-eclipse-goal-lifecycle" /> shows the "Goals"
    dialog with the Tomcat Maven plugin's goals highlighted.</para>

    <para>Another Maven preference page is the Maven Installations
    configuration page shown in <xref
    linkend="fig-eclipse-maven-installations" />:</para>

    <figure id="fig-eclipse-maven-installations">
      <title>Maven Installations Preference Page</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_preferences2.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>This page allows you to add other Maven installations to the Eclipse
    environment. If you want to use a different version of Maven with the
    m2eclipse plugin you can configure multiple installations of Maven from
    this configuration page, this is very similar to the ability to add more
    than one Java Virtual Machine to be run inside of Eclipse. An embedded
    version of the Maven known as the Maven Embedder is already specified.
    This is what is used to execute Maven inside of Eclipse. If you have
    another installation of Maven which you would like to use instead of the
    Maven Embedder, you can add another Maven runtime by clicking on the
    <guibutton>Add..</guibutton> button. <xref
    linkend="fig-eclipse-maven-installations" /> shows a configuration page
    that lists the Maven Embedder, Maven 2.0.9, and an installation of Maven
    2.1-SNAPSHOT.</para>

    <para>The Installations configuration page also allows you to specify the
    location of the global Maven settings file. If you do not specify the
    location of this file on this configuration page, Maven will use the
    default global settings file found in
    <filename>conf/settings.xml</filename> of the selected Maven installation.
    You can also customize the location of your user settings file from the
    default location of <filename>~/.m2/settings.xml</filename>, and you can
    customized the location of your local Maven repository from the default
    location of <filename>~/.m2/repository</filename>.</para>

    <para>Also available in the Eclipse preferences is the ability to enable a
    decorator named the Maven Version Decorator. This preference provides a
    given projectâ€™s current version on the Eclipse Package Explorer and is
    shown in <xref linkend="fig-eclipse-mvn-decorate" />.</para>

    <figure id="fig-eclipse-mvn-decorate">
      <title>Enabling the Maven Version Decorator</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_decorate.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To enable this preference, simply check the Maven Version Decorator
    option that is highlighted in <xref linkend="fig-eclipse-mvn-decorate" />.
    If the Maven Version Decorator is not enabled, a project will only list
    itâ€™s name and relative path in the Package Explorer as shown in <xref
    linkend="fig-eclipse-no-decorate" />:</para>

    <figure id="fig-eclipse-no-decorate">
      <title>Package Explorer without Maven Version Decorator</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_decorate2.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Upon enabling the Maven Version Decorator, the project name will
    include the current project version as shown in <xref
    linkend="fig-eclipse-decorated" />:</para>

    <figure id="fig-eclipse-decorated">
      <title>Package Explorer with Maven Version Decorator Enabled</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="figs/web/eclipse_decorate3.png" scalefit="1"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>This is a helpful feature that provides the project version at a
    glance instead of being required to open the <acronym>POM</acronym> to
    locate the version element.</para>
  </section>

  <section>
    <title>Summary</title>

    <para>m2eclipse is more than just a simple plugin which adds Maven support
    to Eclipse, it is a comprehensive integration that will make everything
    from creating new projects to locating third-party dependencies orders of
    magnitude easier. m2eclipse is the first step toward an
    <acronym>IDE</acronym> that is aware of the rich semantic treasure that is
    the central Maven repository. As more people come to use m2eclipse, more
    projects are going to be releasing Maven Archetypes, and more projects are
    going to see value in publishing source artifacts to the Maven repository.
    If you've tried to use Eclipse and Maven together without a tool that can
    comprehend the hierarchical project relationships that are central to any
    multi-module Maven project, you will know that the ability to work with
    nested projects is essential to smooth integration between the Eclipse
    <acronym>IDE</acronym> and Maven.</para>
  </section>
</chapter>