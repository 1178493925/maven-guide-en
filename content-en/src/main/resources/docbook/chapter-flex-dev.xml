<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Developing with Flexmojos</title>

  <section id="flex-dev-sect-intro">
    <title>Introduction</title>

    <para>This chapter provides an overview of the Flexmojos project for
    people interested in helping to develop and customize the plugin.</para>
  </section>

  <section id="flex-dev-sect-config">
    <title>Configuring Build Environment for Flexmojos</title>

    <para>The Flexmojos build uses Maven, but before you attempt to compile
    with Maven, you will need to configure you Maven settings to reference a
    repository which contains the latest dependencies. To setup your Maven
    environment, you have two options. You can install a simple
    ~/.m2/setting.xml file which references the Sonatype public repository
    directly, or you can install Nexus and add the Sonatype public repository
    as a proxy repository in your own repository manager. While the most
    straightfoward option is to just drop the XML shown in section <xref
    linkend="flex-dev-sect-direct-repo" /> into a ~/.m2/settings.xml file,
    downloading and installing Nexus will give you the control and flexibility
    you need to cache and manage artifacts generated by your own build. If you
    are just interested in getting up and running with Flexmojos, read section
    <xref linkend="flex-dev-sect-direct-repo" /> next. If you are interested
    in a long-term solution which can be deployed to support a development
    team, continue to section XXX.</para>

    <para>If your organization is already using Sonatype Nexus to proxy remote
    repositories, you probably already have a customized ~/.m2/settings.xml
    file which points to a single Nexus group. If this is your situation, you
    should add a Proxy repository for the Sonatype public repository group at
    http://repository.sonatype.com/content/groups/public. Adding a proxy
    repository for this remote group and then adding this group to your Nexus
    installation's public repository group will give clients of your Nexus
    instance access to the artifacts from the Sonatype repository.sonatype.com
    Nexus instance.</para>

    <section id="flex-dev-sect-direct-repo">
      <title>Using Sonatype's Repository Directly</title>

      <para>Before you run Maven against Flexmojos, you need to configure you
      <filename>~/.m2/settings.xml</filename> to contain the following
      XML:</para>

      <example id="ex-flex-dev-settings">
        <title>Settings XML for Sonatype Repository</title>

        <programlisting>&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://repository.sonatype.org/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;!—-Enable snapshots for the built in central repo to direct --&gt;
      &lt;!--all requests to nexus via the mirror --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;!—-make the profile active all the time --&gt;
    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
      </example>

      <note>
        <para>We suggest that you place the contents of <xref
        linkend="ex-flex-dev-settings" /> in you
        <filename>~/.m2/settings.xml</filename> because it is the default
        location for Maven Settings. But, if you have already customized your
        <filename>~/.m2/settings.xml</filename> you can also put the the
        contents of this file in another settings file such as
        <filename>~/.m2/sonatype-settings.xml</filename>. If you do this, you
        just have to rememebr to specify the location of the settings file on
        every Maven command line. For example, <command>mvn install</command>
        would become <command>mvn -s ~/.m2/sonatype-settings.xml
        install</command>.</para>
      </note>

      <para>The XML shown in <xref linkend="ex-flex-dev-settings" />, will
      configure Maven to retrieve all artifacts from the Sonatype Nexus
      installation which is available at <ulink
      url="http://repository.sonatype.org">http://repository.sonatype.org</ulink>.
      This Nexus installation provides a public group which combines a number
      of different repositories into a single repository group. Instead of
      configuring your clients to retrieve artifacts from several different
      repositories, the Sonatype Nexus repository manager allows you
      centralizing clients to one point-of-contact: a single Nexus repository
      group. Builds with use the Flexmojos plugin rely on Flex artifacts which
      are not yet available from standard repositories like the Central Maven
      Repository. Pointing your build at the Sonatype repository allows you to
      retrieve the necessary libraries, SWFs, and SWCs which are required when
      building Flex applications.</para>
    </section>

    <section id="flex-dev-sect-proxy-nexus">
      <title>Proxying Sonatype's Repository with Nexus</title>

      <para>Instead of pointing directly at the Sonatype public repository,
      Sonatype recommends that you install a repository manager and proxy the
      Sonatye public repository. When you proxy a remote repository with a
      repository manager such as Nexus, you gain a level of control and
      stability not possible when your build relies directly on external
      resources. In addition to this control and stability, a repository
      manager also provides you with an deployment target for binary artifacts
      generated by your own builds. For instructions on downloading,
      installing, and configuring Nexus, refer to the <ulink
      url="http://www.sonatype.com/books/nexus-book/reference/install.html">Installation
      chapter in Repository Management with Nexus</ulink>. Once Nexus is
      installed and started, complete the following steps to add a proxy
      repository for the Sonatype public repository.</para>

      <para>To add a new proxy repository, click on the
      <guimenuitem>Repositories</guimenuitem> link under
      <guisubmenu>Views/Repositories</guisubmenu> in the
      <guimenu>Nexus</guimenu> menu on the left-hand side of the Nexus user
      interface. Clicking on <guimenuitem>Repositories</guimenuitem> will load
      the <guilabel>Repositories</guilabel> panel. In the
      <guilabel>Repositories</guilabel> panel, click on the
      <guibutton>Add..</guibutton> button and select Proxy Repository as shown
      in <xref linkend="fig-flex-dev-add-proxy-repos" />.</para>

      <figure id="fig-flex-dev-add-proxy-repos">
        <title>Adding a Proxy Repository to Sonatype Nexus</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-nexus-add-proxy.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you've created a new Proxy repository, you will need to
      configure it to point to the Sonatype public repository. Select the new
      repository, and then select the Configuration tab in the lower half of
      the window. Populate the following field with the values shown in <xref
      linkend="fig-flex-dev-sonatype-public-proxy" />.</para>

      <itemizedlist>
        <listitem>
          <para>Repository ID is "sonatype-public"</para>
        </listitem>

        <listitem>
          <para>Repository Name is "Sonatype Public Proxy"</para>
        </listitem>

        <listitem>
          <para>The Remore Storage Location is <ulink
          url="http://repository.sonatype.org/content/groups/public">http://repository.sonatype.org/content/groups/public</ulink></para>
        </listitem>
      </itemizedlist>

      <figure id="fig-flex-dev-sonatype-public-proxy">
        <title>Configuring the Sonatype Public Proxy Repository</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-nexus-sonatype-proxy.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you have populated the fields shown in <xref
      linkend="fig-flex-dev-sonatype-public-proxy" /> click the Save button to
      save the proxy repository and start proxying the Sonatype public
      repository. Nexus ships with a public repository group, which combines
      several repositories into a single point-of-contact for Maven clients.
      To complete our setup of the new proxy repository, you should add this
      new proxy repository to the Nexus public group. To do this, return to
      the list of repositories which should now be visible in the upper half
      of the Repositories panel as shown in <xref
      linkend="fig-flex-dev-sonatype-public-proxy" />. Click on the Public
      Repositories group and then click on the Configuration tab in the lower
      half of the Repository panel. Clicking the Configuration tab will expose
      the Group configuration form shown in <xref
      linkend="fig-flex-dev-adding-sonatype-to-group" />.</para>

      <figure id="fig-flex-dev-adding-sonatype-to-group">
        <title>Adding the Sonatype Public Proxy to the Public Repositories
        Group</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-nexus-sonatype-to-group.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>To add the <guilabel>Sonatype Public Proxy</guilabel> to the
      <guilabel>Public Repositories</guilabel> group simply drag and drop the
      <guilabel>Sonatype Public Proxy</guilabel> repository from the
      <guilabel>Available Repositories</guilabel> list to the
      <guilabel>Ordered Group Repositories</guilabel> list. Click
      <guibutton>Save</guibutton>, and you have successfully added a proxy of
      the Sonatype public repository to your Nexus installation. Whenever a
      client requests an artifact from this repository group, if Nexus has not
      already cached a matching artifact, it will query the Sonatype public
      repository at <ulink
      url="http://repository.sonatype.org/content/groups/public">http://repository.sonatype.org/content/groups/public</ulink>.
      Your Nexus installation will maintain a local cache of all artifacts
      retrieved from the Sonatype repository. This local cache gives you more
      control and contributes to a more stable build environment. If you are
      setting up a group of developers to rely upon artifacts from the
      Sonatype public repository, you'll have a completely self-contained
      build environment that won't be subject to the availability of the
      Sonatype repository.</para>

      <para>The final step to connecting your Maven installation to the Nexus
      instance you just configured is to update your Maven Settings to use
      your Nexus repository group as a mirror for all repositories. To do
      this, you need to put the following XML in your
      <filename>~/.m2/settings.xml</filename> file.</para>

      <example id="ex-flex-dev-settings-local-nexus">
        <title>Settings XML for Local Nexus Instance</title>

        <programlisting>&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;!—-Enable snapshots for the built in central repo to direct --&gt;
      &lt;!--all requests to nexus via the mirror --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;!—-make the profile active all the time --&gt;
    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
      </example>

      <para>This XML file configures Maven to consult a single public
      repository group for all configured repositories and plugin
      repositories. It is a simple way to guarantee that every request for an
      artifact is made through your Nexus installation.</para>

      <note>
        <para>The only difference between <xref
        linkend="ex-flex-dev-settings-local-nexus" /> and <xref
        linkend="ex-flex-dev-settings" /> is the settings/mirrors/mirror/url
        element. The first example addresses the Sonatype public repository
        directly which the second example references a public group on a Nexus
        instance you maintain. You use Nexus because it allows you to control
        the repositories and artifacts that are used in your build system. You
        can think of Nexus as something of a firewall or a centralized
        point-of-contact between your builds and the external
        environment.</para>
      </note>
    </section>
  </section>

  <section id="flex-dev-sect-creating-project">
    <title>Creating a Flex Mojos Project</title>

    <para>Flexmojos has a set of archetypes which can be used to quickly
    create a new Flex project. The following archetypes are all in the
    <package>org.sonatype.flexmojos</package> group with a version of
    <varname>3.0.0</varname>:</para>

    <variablelist>
      <varlistentry>
        <term>flexmojos-archetypes-library</term>

        <listitem>
          <para>Creates a simple Flex Library project which produces a
          SWC</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos-archetypes-application </term>

        <listitem>
          <para>Creates a simple Flex Application with produces a SWF</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flexmojos-modular-webapp </term>

        <listitem>
          <para>Creates a Multimodule project which consists of a project that
          produces a SWC which is consumed by a project which produces a SWF
          that is ultimately presented in a project that generates a
          WAR</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="flex-dev-sect-creating-lib">
      <title>Creating a Flex Library</title>

      <para>To create a Flex Library Project, execute the following command at
      the command-line:</para>

      <screen>$ <command>mvn archetype:generate \
      -DarchetypeRepository=http://repository.sonatype.org/content/groups/public \
      -DarchetypeGroupId=org.sonatype.flexmojos -DarchetypeArtifactId=flexmojos-archetypes-library \
      -DarchetypeVersion=3.0.0</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] com.sonatype.maven.plugins: checking for updates from central
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] Archetype defined by properties
...
Define value for groupId: : <command>org.sonatype.test</command>
Define value for artifactId: : <command>sample-library</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0-SNAPSHOT</command>
Define value for package:  org.sonatype.test: : <command>org.sonatype.test</command> 
Confirm properties configuration:
groupId: org.sonatype.test
artifactId: sample-library
version: 1.0-SNAPSHOT
package: org.sonatype.test
 Y: : <command>Y</command>
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating OldArchetype: flexmojos-archetypes-library:3.0.0
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.test
[INFO] Parameter: packageName, Value: org.sonatype.test
[INFO] Parameter: basedir, Value: /Users/Tim
[INFO] Parameter: package, Value: org.sonatype.test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: sample-library
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
</screen>

      <para>If you look in the directory sample-library/ you will see that the
      project consists of the directory structure shown in <xref
      linkend="fig-flex-dev-library-archetype-fs" />.</para>

      <figure id="fig-flex-dev-library-archetype-fs">
        <title>Flexmojo Library Archetype File Structure</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-arche-simple-lib-fs.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The product of the simple Flex library archetype only contains
      three files: a POM, one source, and a unit test. Let's examine each of
      these files. First, the Project Object Model (POM).</para>

      <example id="fig-flex-dev-simple-lib-pom">
        <title>Project Object Model for Flex Library Archetype</title>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.flexmojos&lt;/groupId&gt;
    &lt;artifactId&gt;flexmojos-flex-super-pom&lt;/artifactId&gt;
    &lt;version&gt;3.0.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;org.sonatype.test&lt;/groupId&gt;
  &lt;artifactId&gt;sample-library&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;swc&lt;/packaging&gt;

  &lt;name&gt;sample-library Flex&lt;/name&gt;

  &lt;build&gt;
    &lt;!-- this is a workaround due to archetype plugin problems.  Can be removed! --&gt;
    &lt;sourceDirectory&gt;src/main/flex&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;src/test/flex&lt;/testSourceDirectory&gt;
  &lt;/build&gt;

&lt;/project&gt;
</programlisting>
      </example>

      <para><xref linkend="fig-flex-dev-simple-lib-pom" /> is very simple, but
      this simplicity masks the complexity that Maven manages by allowing this
      POM to inherit dependencies and plugin definitions from the parent POM.
      If you look at the parent element in <xref
      linkend="fig-flex-dev-simple-lib-pom" />, you will notice that it
      references flexmojos-flex-super-pom, this parent POm adds the
      dependencies on the flex framework and the flexmojos unit testing
      support components. If you are interested in seeing some of these
      dependencies, run mvn help:effective-pom. Running this command will ask
      Maven to merge this POM with every parent POM it inherits to show you
      the effective end-product of that merge between parent and child.</para>

      <para>In <xref linkend="fig-flex-dev-simple-lib-pom" />, the parent
      element is critical and the packaging is very critical. A POMs packaging
      type controls the lifecycle it uses to produce build output. The value
      swc in the packaging element is Maven's cue to look for the
      Flex-specific lifecycle customizations which are provided by the
      flexmojos-maven-plugin. The other important part of this POM is the
      build element which specifies the location of the Flex source code and
      the Flex unit tests. Next, let's take a quick look at <xref
      linkend="ex-flex-dev-lib-as" /> which contains the sample Actionscript
      which was created by this archetype. </para>

      <example id="ex-flex-dev-lib-as">
        <title>Flex Library Archetype's Sample App Cliass</title>

        <programlisting>package org.sonatype.test {
  public class App {
    public static function greeting(name:String):String {
      return "Hello, " + name;
    }
  }
}
</programlisting>
      </example>

      <para>While this code is underwhelming, it does provide you with a quick
      model and a quick pointer: "Place More Code Here". While it might seem
      silly to test code this simple, a sample test named
      <filename>TestApp.as</filename> is provides in the
      <filename>src/test/flex</filename> directory. This test is shown in
      <xref linkend="ex-flex-dev-test-app" />.</para>

      <example id="ex-flex-dev-test-app">
        <title>Unit Test for Library Archetype's App Class</title>

        <programlisting>package org.sonatype.test {

  import flexunit.framework.TestCase;

  public class TestApp extends TestCase {

    /**
     * Tests our greeting() method
     */
    public function testGreeting():void {
      var name:String = "Buck Rogers";
      var expectedGreeting:String = "Hello, Buck Rogers";

      var result:String = App.greeting(name);
      assertEquals("Greeting is incorrect", expectedGreeting, result);
    }
  }
}
</programlisting>
      </example>

      <para>To run this build, go to the sample-library project directory and
      run mvn install.</para>

      <screen>$ <command>mvn install</command> 
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-library Flex
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] [flexmojos:compile-swc]
[INFO] flexmojos 3.0.0 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file
[WARNING] Nothing expecified to include.  Assuming source and resources folders.
[INFO] Flex compiler configurations:
-compiler.headless-server=false 
-compiler.keep-all-type-selectors=false 
-compiler.keep-generated-actionscript=false 
-compiler.library-path ~/.m2/repository/com/adobe/flex/framework/flex/3.2.0.3958...
-compiler.namespaces.namespace http://www.adobe.com/2006/mxml target/classes/configs/mxml-manifest.xml 
-compiler.optimize=true 
-compiler.source-path src/main/flex 
...
[INFO] [resources:testResources]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory src/test/resources
[INFO] [flexmojos:test-compile]
[INFO] flexmojos 3.0.0 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file
[INFO] Flex compiler configurations:
-compiler.include-libraries ~/.m2/repository/org/sonatype/flexmojos/flexmojos-unittest-support...
-compiler.keep-generated-actionscript=false 
-compiler.library-path ~/.m2/repository/com/adobe/flex/framework/flex/3.2.0.3958/flex-3.2.0.... 
-compiler.optimize=true 
-compiler.source-path src/main/flex target/test-classes src/test/flex 
-compiler.strict=true 
-target-player 9.0.0 
-use-network=true 
-verify-digests=true -load-config= 
[INFO] Already trust on target/test-classes/TestRunner.swf
[INFO] [flexmojos:test-run]
[INFO] flexmojos 3.0.0 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file
[INFO] flexunit setup args: null
[INFO] ------------------------------------------------------------------------
[INFO] Tests run: 1, Failures: 0, Errors: 0, Time Elpased: 0 sec
[INFO] [install:install]
</screen>

      <para>When you ran mvn install on this project, you should notice in the
      output that Maven and Flexmojos plugin is take care of managing all of
      the libraries and the dependencies for the Flex compiler. Much like
      Maven excels at helping Java developers manage the contents of a Java
      classpath, Maven can help Flex developers manage the complex of compile
      paths. If you ran this on a machine with a web browser, you also might
      have been shocked when the Flexmojos project started a web browser and
      used it to execute the TestApp.as class against the project's source
      code.</para>
    </section>
  </section>

  <section id="flex-dev-sect-dev-custom">
    <title>Developing and Customizing Flexmojos</title>

    <para>The following sections guide you through some of first steps toward
    customizing or contributing to the Flexmojos project. Flexmojos is more
    than just a tool for people who are interested in compiling Actionscript
    into SWF and SWC artifacts, it is a community of developers. This section
    isn't for everyone, but, if you have an itch to scratch and you wish to
    participate, come on in.</para>

    <section>
      <title>Get the Flexmojos Source Code</title>

      <para>Flexmojos is an open source project hosted on the Sonatype Forge,
      and the source code for Flexmojos is stored in the Sonatype Forge
      Subversion repository. You can browse the contents of the Flexmojos
      Subversion repository by opening <ulink
      url="http://svn.sonatype.org/flexmojos/trunk">http://svn.sonatype.org/flexmojos/trunk</ulink>
      in a web browser.</para>

      <figure id="flex-dev-svn-repo">
        <title>Flexmojos Subversion Repository</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/flex-dev-subversion.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>If you are interested in participating in the Flexmojos project,
      you will likely want to checkout the current Flexmojos source code to
      your local machine. To checkout the Flexmojos source using Subversion,
      execute the followings command at the command line:</para>

      <screen>$ <command>svn co http://svn.sonatype.org/flexmojos/trunk flexmojos</command>
A flexmojos
...
$ <command>ls</command>
COPYRIGHT               flexmojos-sandbox         pom.xml
flexmojos-archetypes    flexmojos-super-poms      src
flexmojos-maven-plugin  flexmojos-testing
flexmojos-parent        flexmojos-touchstone
</screen>
    </section>
  </section>
</chapter>
