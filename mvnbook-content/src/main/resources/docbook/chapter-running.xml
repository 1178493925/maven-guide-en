<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="running">
  <title>Running Maven</title>

  <para></para>

  <section>
    <title>Defining Properties</title>

    <para>To define a property use the following option:</para>

    <variablelist>
      <varlistentry>
        <term>-D, --define &lt;arg&gt;</term>

        <listitem>
          <para>Defines a system property</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Getting Help</title>

    <para>To list the available command line parameters, use the following
    command:</para>

    <variablelist>
      <varlistentry>
        <term>-h, --help</term>

        <listitem>
          <para>Display help information</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Use Build Profiles</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-P, --activate-profiles &lt;arg&gt;</term>

        <listitem>
          <para>Comma-delimited list of profiles to activate</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Display Version Information</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-V, --show-version</term>

        <listitem>
          <para>Display version information WITHOUT stopping build</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-v, --version</term>

        <listitem>
          <para>Display version information</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Control Network Activity</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-o, --offline</term>

        <listitem>
          <para>Work offline</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Using a Custom POM or Custom Settings File</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-f, --file &lt;file&gt;</term>

        <listitem>
          <para>Forces the use of an alternate POM file</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-s,--settings &lt;arg&gt;</term>

        <listitem>
          <para>Alternate path for the user settings file</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-gs, --global-settings &lt;file&gt;</term>

        <listitem>
          <para>Alternate path for the global settings file</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Encrypting Passwords</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-emp, --encrypt-master-password &lt;password&gt;</term>

        <listitem>
          <para>Encrypt master security password</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-ep, --encrypt-password &lt;password&gt;</term>

        <listitem>
          <para>Encrypt server password</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Dealing with Failure</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-fae, --fail-at-end</term>

        <listitem>
          <para>Only fail the build afterwards; allow all non-impacted builds
          to continue</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-ff, --fail-fast</term>

        <listitem>
          <para>Stop at first failure in reactorized builds</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-fn, --fail-never</term>

        <listitem>
          <para>NEVER fail the build, regardless of project result</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Control Maven's Verbosity</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-e, --errors</term>

        <listitem>
          <para>Produce execution error messages</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-X, --debug</term>

        <listitem>
          <para>Produce execution debug output</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-q, --quiet</term>

        <listitem>
          <para>Quiet output - only show errors</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Running Maven in Batch Mode</title>

    <para>To run Maven in batch mode use the following option:</para>

    <variablelist>
      <varlistentry>
        <term>-B, --batch-mode</term>

        <listitem>
          <para>Run in non-interactive (batch) mode</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Downloading and Verifying Dependencies</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-C, --strict-checksums</term>

        <listitem>
          <para>Fail the build if checksums don't match</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-c, --lax-checksums</term>

        <listitem>
          <para>Warn if checksums don't match</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-U,--update-snapshots</term>

        <listitem>
          <para>Forces a check for updated releases and snapshots on remote
          repositories</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Manipulating Plugins</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-npr, --no-plugin-registry</term>

        <listitem>
          <para>Don't use ~/.m2/plugin-registry.xml for plugin
          versions.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-npu, --no-plugin-updates</term>

        <listitem>
          <para>Suppress upToDate check for any relevant registered
          plugins</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-cpu, --check-plugin-updates</term>

        <listitem>
          <para>Force upToDate check for any relevant registered
          plugins</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-up, --update-plugins</term>

        <listitem>
          <para>Synonym for cpu</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Controlling the Scope of a Build</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>-N, --non-recursive</term>

        <listitem>
          <para>Prevents Maven from building submodules. Only builds the
          project contained in the current directory.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Using Advanced Reactor Options</title>

    <para>Stating with the Maven 2.1, there are new Maven command line options
    which allow you to manipulate the way that Maven will build multimodule
    projects. If you are using Maven 2.0, these new arguments aren't
    available. These new options are:</para>

    <variablelist>
      <varlistentry>
        <term>-r, --reactor</term>

        <listitem>
          <para>Dynamically build reactor from subdirectories</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-rf, --resume-from</term>

        <listitem>
          <para>Resume reactor from specified project</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-pl, --projects</term>

        <listitem>
          <para>Build specified reactor projects instead of all
          projects</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-am, --also-make</term>

        <listitem>
          <para>If project list is specified, also build projects required by
          the list</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-amd, --also-make-dependents</term>

        <listitem>
          <para>If project list is specified, also build projects that depend
          on projects on the list</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section>
      <title>Resuming Builds</title>

      <para>Suppose we're working on our code and we attempt to run mvn
      install from simple-parent, but we encounter a test failure in
      simple-weather. We make additional changes to simple-weather without
      changing simple-model; we know that simple-model is fine, so there's no
      need to rebuild/test it. We can then use the --resume-from argument,
      like this:</para>

      <screen>$ <command>mvn --resume-from simple-weather install</command></screen>

      <para>That will skip over simple-model and pick up the build where we
      left off in simple-weather. If simple-weather succeeds, Maven will go on
      to build the rest of the projects.</para>
    </section>

    <section>
      <title>Specifying a Subset of Projects</title>

      <para>Suppose we've made some changes to simple-command and
      simple-webapp and would like to rebuild just those two projects. We can
      use the --projects argument, like this:</para>

      <screen>$ <command>mvn --projects simple-command,simple-webapp install</command></screen>

      <para>That will automatically build just those two projects, saving us
      the trouble of running Maven in each directory separately.</para>
    </section>

    <section>
      <title>Making Subsets</title>

      <para>Suppose we're developers working on simple-command; we don't want
      to work on simple-webapp right now, but just want to get a working build
      of simple-command. We can use --also-make, like this:</para>

      <screen>$ <command>mvn --projects simple-command --also-make install</command></screen>

      <para>When we use --also-make, Maven will examine the list of projects
      (currently just simple-command) and walk down the dependency tree,
      finding all of the projects that it needs to build. In this case, it
      will automatically build simple-model, simple-weather and
      simple-persist, without building simple-webapp.</para>
    </section>

    <section>
      <title>Changing simple-weather and verifying we didn't break anything
      using --also-make-dependents</title>

      <para>Suppose we've made a change to simple-weather; we want to make
      sure we didn't break any of the projects that depend on we. (In this
      case, we want to make sure that we didn't break simple-command and
      simple-webapp, but in a more complex reactor that might not be so
      obvious.) We also want to avoid rebuilding/testing projects that we know
      we haven't changed. In this case, we want to avoid building
      simple-persist. We can use --also-make-dependents, like this: <screen>$ <command>mvn --projects simple-weather --also-make-dependents install</command></screen>When
      we use --also-make-dependents, Maven will examine all of the projects in
      our reactor to find projects that depend on simple-weather, and
      automatically build those and nothing else. In this case, it will
      automatically build simple-weather and then simple-command and
      simple-webapp. </para>
    </section>

    <section>
      <title>Resuming a "make" build</title>

      <para>When we use --also-make, we run a subset of projects, but that
      doesn't mean stuff won't fail halfway through the build. We can resume
      our --also-make build from the project that stopped the build by using
      --resume-from together with --also-make, like this: </para>

      <screen>$ <command>mvn --projects simple-command --also-make \
      --resume-from simple-weather install</command></screen>

      <para>The --resume-from argument also works with --also-make-dependents.
      </para>
    </section>
  </section>

  <section id="installation-sect-help-plugin-install">
    <title>Using the Maven Help Plugin</title>

    <para>Throughout the book, we will be introducing Maven plugins, talking
    about Maven Project Object Model (<acronym>POM</acronym>) files, settings
    files, and profiles. There are going to be times when you need a tool to
    help you make sense of some of the models that Maven is using and what
    goals are available on a specific plugin. The Maven Help plugin allows you
    to list active Maven profiles, display an effective
    <acronym>POM</acronym>, print the effective settings, or list the
    attributes of a Maven plugin.</para>

    <note>
      <para>For a conceptual overview of the POM and plugins see <xref
      linkend="simple-project" xrefstyle="style:title" />.</para>
    </note>

    <para>The Maven Help plugin has four goals. The first three
    goals—<varname>active-profiles</varname>,
    <varname>effective-pom</varname>, and
    <varname>effective-settings</varname>—describe a particular project and
    must be run in the base directory of a project. The last
    goal—<varname>describe</varname>—is slightly more complex, showing you
    information about a plugin or a plugin goal. The following commands
    provide some general information about the four goals:</para>

    <variablelist>
      <varlistentry>
        <term>help:active-profiles</term>

        <listitem>
          <para>Lists the profiles (project, user, global) which are active
          for the build.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-pom</term>

        <listitem>
          <para>Displays the effective <acronym>POM</acronym> for the current
          build, with the active profiles factored in.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-settings</term>

        <listitem>
          <para>Prints out the calculated settings for the project, given any
          profile enhancement and the inheritance of the global settings into
          the user-level settings.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:describe</term>

        <listitem>
          <para>Describes the attributes of a plugin. This need not run under
          an existing project directory. You must at least give the
          <varname>groupId</varname> and <varname>artifactId</varname> of the
          plugin you wish to describe.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="installation-sect-describing-plugin">
      <title>Describing a Maven Plugin</title>

      <para>Once you start using Maven, you'll spend most of your time trying
      to get more information about Maven Plugins: How do plugins work? What
      are the configuration parameters? What are the goals? The
      <varname>help:describe</varname> goal is something you'll be using very
      frequently to retrieve this information. With the
      <varname>plugin</varname> parameter you can specify a plugin you wish to
      investigate, passing in either the plugin prefix (e.g.
      <varname>maven-help-plugin</varname> as <varname>help</varname>) or the
      <varname>groupId:artifact[:version]</varname>, where version is
      optional. For example, the following command uses the Help plugin's
      <varname>describe</varname> goal to print out information about the
      Maven Help plugin.</para>

      <screen>$ <command>mvn help:describe -Dplugin=help</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to give 
    usage information.
...
</screen>

      <para>Executing the <varname>describe</varname> goal with the
      <varname>plugin</varname> parameter printed out the Maven coordinates
      for the plugin, the goal prefix, and a brief description of the plugin.
      While this information is helpful, you'll usually be looking for more
      detail than this. If you want the Help plugin to print a full list of
      goals with parameters, execute the <varname>help:describe</varname> goal
      with the parameter <varname>full</varname> as follows:</para>

      <screen>$ <command>mvn help:describe -Dplugin=help -Dfull</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to 
    give usage information.

Mojos:

===============================================
Goal: 'active-profiles'
===============================================
Description:

Lists the profiles which are currently active for this build.

Implementation: org.apache.maven.plugins.help.ActiveProfilesMojo
Language: java

Parameters:
-----------------------------------------------

[0] Name: output
Type: java.io.File
Required: false
Directly editable: true
Description:

This is an optional parameter for a file destination for the output of 
this mojo...the listing of active profiles per project.

-----------------------------------------------

[1] Name: projects
Type: java.util.List
Required: true
Directly editable: false
Description:

This is the list of projects currently slated to be built by Maven.

-----------------------------------------------

This mojo doesn't have any component requirements.
===============================================

... removed the other goals ...
</screen>

      <para>This option is great for discovering all of a plugin's goals as
      well as their parameters. But sometimes this is far more information
      than necessary. To get information about a single goal, set the
      <varname>mojo</varname> parameter as well as the
      <varname>plugin</varname> parameter. The following command lists all of
      the information about the Compiler plugin's <varname>compile</varname>
      goal.</para>

      <screen>$ <command>mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull</command></screen>

      <note>
        <para>What? A Mojo? In Maven, a Plugin goal is known as a
        "Mojo".</para>
      </note>
    </section>
  </section>
</chapter>
